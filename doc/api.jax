*api.txt*		Nvim


		 NVIM REFERENCE MANUAL    by Thiago de Arruda


Nvim API							   *API* *api*

Nvim exposes a powerful API that can be used by plugins and external processes
via |RPC|, |Lua| and VimL (|eval-api|).
Nvimは、プラグインや|RPC|, |Lua|,VimL(|eval-api|)で使用できる、パワフルなAPIを
公開しています。

Applications can also embed libnvim to work with the C API directly.
アプリケーションは、libnvimを直接埋めこむことで、C言語のAPIと直接連携することも
できます。

                                      Type |gO| to see the table of contents.

==============================================================================
API 使用方法						*api-rpc* *RPC* *rpc*

							*msgpack-rpc*
RPC is the typical way to control Nvim programmatically.  Nvim implements the
MessagePack-RPC protocol:
RPCはNvimをプログラマブルに操作する典型的な方法です。Nvimは以下の
MessagePack-RPC protocolを実装しています。

  https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md
  https://github.com/msgpack/msgpack/blob/0b8f5ac/spec.md

Many clients use the API: user interfaces (GUIs), remote plugins, scripts like
"nvr" (https://github.com/mhinz/neovim-remote).  Even Nvim itself can control
other Nvim instances.  API clients can:
GUI, リモートプラグイン、nvrのようなスクリプトの多くのクライアントは、APIを使います。
Nvim自身でさえ、他のNvimのインスタンスを制御可能です。
APIクライアントは、以下のことが可能です

  - Call any API function
  - どのAPIでも呼ぶことができる

  - Listen for events
  - イベント監視ができる

  - Receive remote calls from Nvim
  - Nvimからのリモート呼び出しを受け取ることができる

The RPC API is like a more powerful version of Vim's "clientserver" feature.
RPC APIはVimの"clientserver"をよりパワフルにしたようなものとなります。

CONNECTING						*rpc-connecting*

See |channel-intro| for various ways to open a channel. Channel-opening
functions take an `rpc` key in the options dictionary. RPC channels can also
be opened by other processes connecting to TCP/IP sockets or named pipes
listened to by Nvim.
チャネルを開くためのいくつかの方法を |channel-intro| で確認してください。
チャネルを開く関数は、オプション辞書の`rpc`を取り込みます。
RPCチャネルは、Nvimで待ち受けしているTCP/IPソケットや名前付きパイプに
接続している、他のプロセスでも開くことができます。

Nvim creates a default RPC socket at |startup|, given by |v:servername|. To
start with a TCP/IP socket instead, use |--listen| with a TCP-style address: >
Nvimは |startup| のときに |v:servername| によって与えられた、標準RPCソケットを
作ります。
標準RPCソケット以外でnvimを起動するには、以下のように |--listen| を使い
TCP形式のアドレスを指定してください。

    nvim --listen 127.0.0.1:6666

More endpoints can be started with |serverstart()|.
多くの端末からは、|serverstart()| で接続できます。

Note that localhost TCP sockets are generally less secure than named pipes,
and can lead to vunerabilities like remote code execution.
Note 一般的に、ローカルホストのTCPソケットは、名前付きパイプよりも安全性が低いです。
リモートコード実行のような脆弱性につながる可能性があります。

Connecting to the socket is the easiest way a programmer can test the API,
which can be done through any msgpack-rpc client library or full-featured
|api-client|. Here's a Ruby script that prints "hello world!" in the current
Nvim instance:
msgpack-rpcライブラリまたは |api-client|の全機能を通してソケットに
接続することは、プログラマがAPIのテストを簡単にする最も簡単な方法です。
以下は、Nvimインスタンスで "hello world!" を出力するRubyスクリプトです。
>
    #!/usr/bin/env ruby
    # Requires msgpack-rpc: gem install msgpack-rpc
    #
    # To run this script, execute it from a running Nvim instance (notice the
    # trailing '&' which is required since Nvim won't process events while
    # running a blocking command):
    #
    #	:!./hello.rb &
    #
    # Or from another shell by setting NVIM_LISTEN_ADDRESS:
    # $ NVIM_LISTEN_ADDRESS=[address] ./hello.rb

    require 'msgpack/rpc'
    require 'msgpack/rpc/transport/unix'

    nvim = MessagePack::RPC::Client.new(MessagePack::RPC::UNIXTransport.new, ENV['NVIM_LISTEN_ADDRESS'])
    result = nvim.call(:nvim_command, 'echo "hello world!"')
<
A better way is to use the Python REPL with the `neovim` package, where API
functions can be called interactively:
より良い方法は、API機能を対話的に呼ぶことができる、pynvimをPythonのREPLで使用することです。
>
    >>> from pynvim import attach
    >>> nvim = attach('socket', path='[address]')
    >>> nvim.command('echo "hello world!"')
<
You can also embed Nvim via |jobstart()|, and communicate using |rpcrequest()|
and |rpcnotify()|:
Nvimの |jobstart()| 経由で |rpcrequest()| と|rpcnotify()|を使っての通信を埋め込む
こともできます。
>
    let nvim = jobstart(['nvim', '--embed'], {'rpc': v:true})
    echo rpcrequest(nvim, 'nvim_eval', '"Hello " . "world!"')
    call jobstop(nvim)

==============================================================================
API定義	~        					*api-definitions*

							*api-types*
The Nvim C API defines custom types for all function parameters. Some are just
typedefs around C99 standard types, others are Nvim-defined data structures.
NvimのC言語APIは、すべての関数パラメータのために、カスタム型を定義します。
NvimのC言語APIのいくつかは、ただのC99標準周辺のtypedefsであり、
残りはNVIMによって定義されたデータ構造です。

基本型 ~

  API Type				C type
  ------------------------------------------------------------------------
  Nil
  Boolean				bool
  Integer (signed 64-bit integer)	int64_t
  Float (IEEE 754 double precision)	double
  String				{char* data, size_t size} struct
  Array
  Dictionary (msgpack: map)
  Object

  Note: empty Array is accepted as a valid argument for Dictionary parameter.
  注意：空の配列は辞書パラメータにとって有効な引き数として認識されます。

特別な型 (msgpack 拡張) ~

  These are integer typedefs discriminated as separate Object subtypes. They
  can be treated as opaque integers, but are mutually incompatible: Buffer may
  be passed as an integer but not as Window or Tabpage.
  いくつかの整数型は、いくつかの分割されたオブジェクトのサブタイプとして区別
  されます。


  The EXT object data is the (integer) object handle. The EXT type codes given
  in the |api-metadata| `types` key are stable: they will not change and are
  thus forward-compatible.
  拡張オブジェクトデータは、整数型のオブジェクトハンドルです。
  |api-metadata|型のキーの中で与えられる拡張データ型のコードは安定しています。
  従って、これらは変更されず前方互換性があります。

  EXT Type	C type					Data
  ------------------------------------------------------------------------
  Buffer	enum value kObjectTypeBuffer		|bufnr()|
  Window	enum value kObjectTypeWindow		|window-ID|
  Tabpage	enum value kObjectTypeTabpage		internal handle


							*api-indexing*
Most of the API uses 0-based indices, and ranges are end-exclusive. For the
end of a range, -1 denotes the last line/column.
APIの大半は、添字が0から始まるインデックス方式を使用し、その範囲は終端を含みません。
インデックス範囲の終わりは、最後の行/列を示します。

Exception: the following API functions use "mark-like" indexing (1-based
lines, 0-based columns): 
例外: 次のようなAPI機能は、vimのマーク機能のようなインデックスを
貼ります（添字が1から始まる行, 添字が1から始まるカラム）。

    |nvim_buf_get_mark()|
    |nvim_win_get_cursor()|
    |nvim_win_set_cursor()|

							*api-fast*
Most API functions are "deferred": they are queued on the main loop and
processed sequentially with normal input.  So if the editor is waiting for
user input in a "modal" fashion (e.g. the |hit-enter-prompt|), the request
will block.  Non-deferred ({fast}) functions such as |nvim_get_mode()| and
|nvim_input()| are served immediately (i.e. without waiting in the input
queue).  Lua code can use |vim.in_fast_event()| to detect a {fast} context.
多くのAPI関数は、メインループと通常の入力でシーケンシャル遅延処理される
キューです。
それで、もしエディタがモーダル（例: |hit-enter-prompt|）でユーザの入力を
待っているならば、リクエストはブロックされるでしょう。
|nvim_get_mode()| や|nvim_input()|のような遅延処理されない関数は、
入力キューでの待機なしで、即座に実施されます。


==============================================================================
API メタデータ						*api-metadata*

The Nvim C API is automatically exposed to RPC by the build system, which
parses headers in src/nvim/api/* and generates dispatch-functions mapping RPC
API method names to public C API functions, converting/validating arguments
and return values.
NvimのC言語APIは、ビルド時にsrc/nvim/api/*内のヘッダを変換・検証してパースし、
RPC API関数と同じ名前のC言語API関数とのマッピングを自動的に生成・公開します。

Nvim exposes its API metadata as a Dictionary with these items:
Nvimは、以下の項目をディクショナリ型のAPIのメタデータとして公開します。

version			Nvim version, API level/compatibility
                        Nvimのバージョン APIレベル/互換性

version.api_level	API version integer *api-level*
                        APIのバージョン int型で*api-level*

version.api_compatible	API is backwards-compatible with this level
                        API Levelにおける後方互換性
                        
version.api_prerelease	Declares the API as unstable/unreleased >
			(version.api_prerelease && fn.since == version.api_level)
                        unstable/unrelatedなAPIの宣言
                        (version.api_prerelease && fn.since == version.api_level)

functions		API function signatures, containing |api-types| info
                        describing the return value and parameters.
                        返却値やパラメータを記述した|api-types| 情報を含む
                        API関数のシグネチャ

ui_events		|UI| event signatures
			|UI| イベントのシグネチャ

ui_options		Supported |ui-option|s
			サポートされている |ui-options|

{fn}.since		API level where function {fn} was introduced
			API levelの関数がどこで紹介されていたか

{fn}.deprecated_since	API level where function {fn} was deprecated
			API level 関数がいつ廃止されていたか

types			Custom handle types defined by Nvim
			Nvimによって定義されたカスタムハンドルの型

error_types		Possible error types returned by API functions
			API関数によって返却可能なエラー型

About the `functions` map:
メソッドのマッピングについて:

  - Container types may be decorated with type/size constraints, e.g.
    ArrayOf(Buffer) or ArrayOf(Integer, 2).
    コンテナ型は 型/サイズの制約によって修飾できます。
    例.
    ArrayOf(Buffer) or ArrayOf(Integer, 2).

  - Functions considered to be methods that operate on instances of Nvim
    special types (msgpack EXT) have the "method=true" flag. The receiver type
    is that of the first argument. Method names are prefixed with `nvim_` plus
    a type name, e.g. `nvim_buf_get_lines` is the `get_lines` method of
    a Buffer instance. |dev-api|
    Nvimの特別な型（msgpack拡張）インスタンスを操作するメソッドと見なされる
    関数は、"method=true"フラグを持ちます。

  - Global functions have the "method=false" flag and are prefixed with just
    `nvim_`, e.g. `nvim_get_buffers`.
    グローバル関数は、"method=false"フラグと、`nvim_` プレフィックスを持ちます。
    例. `nvim_get_buffers`


							*api-mapping*
External programs (clients) can use the metadata to discover the API, using
any of these approaches:
外部のクライアントプログラムは、以下のアプローチのいずれかを使うことで、
APIの発見にメタデータを使うことができます。

  1. Connect to a running Nvim instance and call |nvim_get_api_info()| via
     msgpack-rpc. This is best for clients written in dynamic languages which
     can define functions at runtime.
     起動中のNvimインスタンセスに接続し、msgpack-rpc経由で |nvim_get_api_info()|を
     コールします。
     これが、実行中にメソッドを定義できる動的な言語で記述されたクライアントにとって、
     最善です。

  2. Start Nvim with the |--api-info| option. Useful for clients written in
     statically-compiled languages.
     静的なコンパイルされた言語については、Nvimを|--api-info|オプション付きで起動してください。
     
  3. Use the |api_info()| Vimscript function.
     Vimscriptは|api_info()|を使ってください。

Example: To get a human-readable list of API functions: >
例: 人間にとって読みやすいAPIメソッドのリストを取得するためには:
    :new|put =map(filter(api_info().functions, '!has_key(v:val,''deprecated_since'')'), 'v:val.name')

Example: To get a formatted dump of the API using python (requires the
"pyyaml" and "msgpack-python" modules): >
    nvim --api-info | python -c 'import msgpack, sys, yaml; print yaml.dump(msgpack.unpackb(sys.stdin.read()))'
<
例: python(要 "pyyaml" and "msgpack-python"モジュール)を使用して、フォーマット済APIダンプを取得するには:

==============================================================================
API contract                                                     *api-contract*
API規約

The Nvim API is composed of functions and events.
NVIMのAPIは関数とイベントから構成される。

- Clients call functions like those described at |api-global|.
  クライアントは|api-global|で記述された関数のようにコールする。

- Clients can subscribe to |ui-events|, |api-buffer-updates|, etc.
  クライアントは|ui-events|, |api-buffer-updates|などを読み込む

- API function names are prefixed with "nvim_".
  API関数の名前は "nvim_" のプレフィックスがつく。

- API event names are prefixed with "nvim_" and suffixed with "_event".
  APIのイベント名は"nvim_"のプレフィックスと"_event"のサフィックスがつく。

As Nvim evolves the API may change in compliance with this CONTRACT:
Nvimが進歩するにつれて、APIは規約に従って変更するかもしれません:

- New functions and events may be added.
  新しい関数やイベントが追加されるかもしれません。

  - Any such extensions are OPTIONAL: old clients may ignore them.
    古いクライアントのような任意の拡張は、無視するかもしれません

- Function signatures will NOT CHANGE (after release).
  リリース後は、関数のシグニチャを変更しないでしょう。

  - Functions introduced in the development (unreleased) version MAY CHANGE.
    (Clients can dynamically check `api_prerelease`, etc. |api-metadata|)
  非リリースな開発中に導入された関数は、変更されるかもしれません。
  （クライアントは`api_prerelease`などをチェックします |api-metadata|）

- Event parameters will not be removed or reordered (after release).
  リリース後のイベントのパラメータは、削除または記録はされないでしょう。

- Events may be EXTENDED: new parameters may be added.
  イベントは拡張されるかもしれません: 新しいパラメータは追加されるかもしれません。


- New items may be ADDED to map/list parameters/results of functions and
  events.
  新しい関数やイベントのmap/listやparameters/resultsは追加されるかもしれません。

  - Any such new items are OPTIONAL: old clients may ignore them.
    古いクライアントのような任意のイベントは、無視するかもしれません。

  - Existing items will not be removed (after release).
    リリース後の既存の項目は削除されないでしょう。

- Deprecated functions will not be removed until Nvim version 2.0
  Nvimのバージョン2.0まで、廃止された関数は削除されないでしょう。

==============================================================================
Global events						    *api-global-events*
APIのグローバルなイベント

When a client invokes an API request as an async notification, it is not
possible for Nvim to send an error response. Instead, in case of error, the
following notification will be sent to the client:
クライアントが非同期通知としてAPIリクエストを呼んだとき、Nvimはエラー応答を
送信できません。
                                                             *nvim_error_event*
nvim_error_event[{type}, {message}]

{type} is a numeric id as defined by `api_info().error_types`, and {message} is
a string with the error message.
{type}は、`api_info().error_types`によって定義された整数値です。
{message}は、エラーメッセージの文字列です。

==============================================================================
Buffer update events					*api-buffer-updates*
バッファ更新イベント

API clients can "attach" to Nvim buffers to subscribe to buffer update events.
This is similar to |TextChanged| but more powerful and granular.
APIクライアントは、Nバッファ更新イベントを読み込むために、vimバッファへアタッチできます。

Call |nvim_buf_attach()| to receive these events on the channel:
チャンネルでそれらのイベントを受信するためには、|nvim_buf_attach()|をコールしてください。

                                                        *nvim_buf_lines_event*
nvim_buf_lines_event[{buf}, {changedtick}, {firstline}, {lastline}, {linedata}, {more}]

  When the buffer text between {firstline} and {lastline} (end-exclusive,
  zero-indexed) were changed to the new text in the {linedata} list. The
  granularity is a line, i.e. if a single character is changed in the editor,
  the entire line is sent.
  1行目{firstline}から最終行{lastline}（0から始まるインデックス方式）までの間の
  バッファテキストが、{linedata}リストのなかで新しい行に変更されたときです。
  粒度は行単位です。例として、もしエディタ内で1文字変更されたなら、行全体が
  送られます。


  When {changedtick} is |v:null| this means the screen lines (display) changed
  but not the buffer contents. {linedata} contains the changed screen lines.
  This happens when 'inccommand' shows a buffer preview.
  {changedtick}が|v:null|なとき、これは表示行を変更されたことを意味します。
  しかし、バッファ内容ではありません。
  これは、'inccommand'がバッファプレビューを表示したときに発生します。


  Properties:~
  プロパティ:
    {buf} API buffer handle (buffer number)
    {buf} APIバッファハンドル（バッファ番号）

    {changedtick} value of |b:changedtick| for the buffer. If you send an API
    command back to nvim you can check the value of |b:changedtick| as part of
    your request to ensure that no other changes have been made.
    {changedtick}は、バッファ用変数である|b:changedtick|の値。
    nvimに返却されるAPIコマンドを送信時、
    リクエスト全体の一部として、他の変更は行われていないことを
    |b:changedtick|の値で確認できる。


    {firstline} integer line number of the first line that was replaced.
    Zero-indexed: if line 1 was replaced then {firstline} will be 0, not 1.
    {firstline} is always less than or equal to the number of lines that were
    in the buffer before the lines were replaced.
    {firstline}は置換された最初の行番号を示す整数値。
    0から始まるインデックス方式:1行目が置換されたなら、{firstline}は、
    1ではなく0です。
    {firstline}は、いつもバッファ内の行が置換される前の行番号以下または同値です。

    {lastline} integer line number of the first line that was not replaced
    (i.e. the range {firstline}, {lastline} is end-exclusive).
    Zero-indexed: if line numbers 2 to 5 were replaced, this will be 5 instead
    of 6. {lastline} is always be less than or equal to the number of lines
    that were in the buffer before the lines were replaced. {lastline} will be
    -1 if the event is part of the initial update after attaching.
    {lastline}は置換されていない最初の行番号を示す整数値。
    (例. {firstline}と{lastline}の範囲は、終端を含まない)


    {linedata} list of strings containing the contents of the new buffer
    lines. Newline characters are omitted; empty lines are sent as empty
    strings.
    {linedata}は、新しいバッファのコンテンツを含む文字列のリストです。
    新しい行の文字は省かれます; 空行は空の文字として扱われます。

    {more} boolean, true for a "multipart" change notification: the current
    change was chunked into multiple |nvim_buf_lines_event| notifications
    (e.g. because it was too big).
    {more}は真偽値です。trueは複数箇所の文字変更の通知です: 現在のの変更は
    複数の |nvim_buf_lines_event| 通知のなかにまとめられました。
    (現在のの変更は大きすぎるためです)

nvim_buf_changedtick_event[{buf}, {changedtick}]  *nvim_buf_changedtick_event*

  When |b:changedtick| was incremented but no text was changed. Relevant for
  undo/redo.
  |b:changedtick| がインクリメントされたがテキストの変更がなかった場合の、
  アンドゥ/リドゥに関連します。

  Properties:~
    {buf} API buffer handle (buffer number)
    {changedtick} new value of |b:changedtick| for the buffer
    {buf} APIバッファハンドル（バッファ番号）
    {changedtick} バッファのための |b:changedtick| の最新の値

nvim_buf_detach_event[{buf}]                           *nvim_buf_detach_event*

  When buffer is detached (i.e. updates are disabled). Triggered explicitly by
  |nvim_buf_detach()| or implicitly in these cases:
  バッファがデタッチしたとき（例. 更新が無効化された）のイベント。
  |nvim_buf_detach()|による明示的なトリガ、または以下の暗黙的な場合:

  - Buffer was |abandon|ed and 'hidden' is not set.
    バッファが廃棄され、'hidden'がセットされていない

  - Buffer was reloaded, e.g. with |:edit| or an external change triggered
    |:checktime| or 'autoread'.
    |:edit|または|:checktime|または'autoread'による外部的な変更によって、バッファがリロードされたとき

  - Generally: whenever the buffer contents are unloaded from memory.
    一般的に:
    バッファの内容がメモリから廃棄されるときいつでもイベントが発火する

  Properties:~
    {buf} API buffer handle (buffer number)
    {buf} APIバッファハンドル（バッファ番号）


EXAMPLE ~

Calling |nvim_buf_attach()| with send_buffer=true on an empty buffer, emits: >
空のバッファ上で、send_buffer=trueとともに|nvim_buf_attach|呼ぶと、次の
イベントが発生します。
  nvim_buf_lines_event[{buf}, {changedtick}, 0, -1, [""], v:false]

User adds two lines to the buffer, emits: >
ユーザがバッファに2行追加したら、次のイベントが発生します。
  nvim_buf_lines_event[{buf}, {changedtick}, 0, 0, ["line1", "line2"], v:false]

User moves to a line containing the text "Hello world" and inserts "!", emits: >
ユーザが"Hello world"を含む行に移動し、"!"を挿入したら、次のイベントが
発生します。
  nvim_buf_lines_event[{buf}, {changedtick}, {linenr}, {linenr} + 1,
                       ["Hello world!"], v:false]

User moves to line 3 and deletes 20 lines using "20dd", emits: >
ユーザが3行目に移動して、"20dd"で20行を削除したら、次のイベントが
発生します。
  nvim_buf_lines_event[{buf}, {changedtick}, 2, 22, [], v:false]

User selects lines 3-5 using |linewise-visual| mode and then types "p" to
paste a block of 6 lines, emits: >
ユーザは|linewise-visual|モードで3-5行目を選択し、"p"を入力してから
6行ペーストすると、次のイベントが発生します。
  nvim_buf_lines_event[{buf}, {changedtick}, 2, 5,
    ['pasted line 1', 'pasted line 2', 'pasted line 3', 'pasted line 4',
     'pasted line 5', 'pasted line 6'],
    v:false
  ]

User reloads the buffer with ":edit", emits: >
ユーザテキストを編集してからリロードすると、次のイベントが発生します。
  nvim_buf_detach_event[{buf}]
<

LUA ~
                                                        *api-buffer-updates-lua*
In-process Lua plugins can receive buffer updates in the form of Lua
callbacks. These callbacks are called frequently in various contexts;
|textlock| prevents changing buffer contents and window layout (use
|vim.schedule| to defer such operations to the main loop instead).
プロセスにおいて、LuaプラグインはLuaのコールバックの形でバッファの更新を
受け取ることができます。
これらのコールバックは、様々な文脈の形で頻繁に呼ばれます。
|textlock|はバッファ内容とウインドウのレイアウトを遮ります（前述の処理を
メインループに延期するため、|vim.schedule|を使用します）。

|nvim_buf_attach| will take keyword args for the callbacks. "on_lines" will
receive parameters ("lines", {buf}, {changedtick}, {firstline}, {lastline},
{new_lastline}, {old_byte_size}[, {old_utf32_size}, {old_utf16_size}]).
Unlike remote channel events the text contents are not passed. The new text can
be accessed inside the callback as
|nvim_buf_attach| はコールバックからキーワード引数を取得します。
行中のパラメータを受け取ります("lines", {buf}, {changedtick}, {firstline}, {lastline},
{new_lastline}, {old_byte_size}[, {old_utf32_size}, {old_utf16_size}]など)。
リモートチャンネルとは異なり、テキストの内容は通過されません。新しいテキストは
コールバックの内部で以下のようにアクセスできます。

    `vim.api.nvim_buf_get_lines(buf, firstline, new_lastline, true)`

{old_byte_size} is the total size of the replaced region {firstline} to
{lastline} in bytes, including the final newline after {lastline}. if
`utf_sizes` is set to true in |nvim_buf_attach()| keyword args, then the
UTF-32 and UTF-16 sizes of the deleted region is also passed as additional
arguments {old_utf32_size} and {old_utf16_size}.
{old_byte_size}は、{lastline}後の最新の追加行を含む、{firstline}から
{lastline}の範囲で置換された内容の合計バイト数です。
もし`utf_sizes`が|nvim_buf_attach()|の引数内でtrueに設定されたならば、
削除された領域のUTF-32とUTF-16サイズもまた{old_utf32_size}と{old_utf16_size}の
追加引数として許可される。

"on_changedtick" is invoked when |b:changedtick| was incremented but no text
was changed. The parameters recieved are ("changedtick", {buf}, {changedtick}).
テキストの変更はないけれど|b:changedtick|がインクリメントされたとき、
"on_changedtick"は呼び出される。

                                                        *api-lua-detach*
In-process Lua callbacks can detach by returning `true`. This will detach all
callbacks attached with the same |nvim_buf_attach| call.
処理中において、Luaのコールバックは`true`の返却によってデタッチできる。
このことは同じ|nvim_buf_attach|コールとともアタッチされたすべてのコールバックを
デタッチします。


==============================================================================
Buffer highlighting					       *api-highlights*

Nvim allows plugins to add position-based highlights to buffers. This is
similar to |matchaddpos()| but with some key differences. The added highlights
are associated with a buffer and adapts to line insertions and deletions,
similar to signs. It is also possible to manage a set of highlights as a group
and delete or replace all at once.
Nvimは位置ベースのハイライトをバッファに追加できます。|matchaddpos()|に似ていま
すが、いくつか重要な違いがあります。追加されたハイライトはバッファに関連づけられ
signの様に行の追加と削除に追従します。ハイライトのセットをグループとして管理し、
一度に削除や置換をすることもできます。

The intended use case are linter or semantic highlighter plugins that monitor
a buffer for changes, and in the background compute highlights to the buffer.
Another use case are plugins that show output in an append-only buffer, and
want to add highlights to the outputs. Highlight data cannot be preserved
on writing and loading a buffer to file, nor in undo/redo cycles.
意図された使い方は、バッファの変更を監視しバックグラウンドでハイライトを計算する
リンターやセマンティックハイライトプラグインです。もう1つの使用例として出力専用
バッファの出力にハイライトを追加するプラグインがあります。ハイライトのデータは
バッファの読み書き、アンドゥ/リドゥで保持されません。

Highlights are registered using the |nvim_buf_add_highlight()| function. If an
external highlighter plugin wants to add many highlights in a batch,
performance can be improved by calling |nvim_buf_add_highlight()| as an
asynchronous notification, after first (synchronously) reqesting a source id.
ハイライトは|nvim_buf_add_highlight()|関数を使って登録します。外部のハイライト
プラグインで一度に多くのハイライトを追加したい場合、最初に(同期的に)ソースidを
取得した後で|nvim_buf_add_highlight()|を非同期的に呼び出すことでパフォーマンスが
改善されます。

Example using the Python API client (|pynvim|):
Python APIクライアント(|pynvim|)を使った例:
>
    src = vim.new_highlight_source()
    buf = vim.current.buffer
    for i in range(5):
        buf.add_highlight("String",i,0,-1,src_id=src)
    # some time later ...
    # しばらくしてから ...
    buf.clear_namespace(src)
<
If the highlights don't need to be deleted or updated, just pass -1 as
src_id (this is the default in python). Use |nvim_buf_clear_namespace()| to
clear highlights from a specific source, in a specific line range or the
entire buffer by passing in the line range 0, -1 (the latter is the default in
python as used above).
ハイライトの削除や更新をしない場合、src_idに-1を渡します(Pythonのデフォルト値)。
|nvim_buf_clear_namespace()|を使用するとハイライトを削除できます。範囲指定をする
ことができ、0、-1を指定するとバッファ全体が対象になります(-1は上記で使用した
Pythonのデフォルト値です)。

Example using the API from Vimscript: >
Vimscriptを使った例:

    call nvim_buf_set_lines(0, 0, 0, v:true, ["test text"])
    let src = nvim_buf_add_highlight(0, 0, "String", 1, 0, 4)
    call nvim_buf_add_highlight(0, src, "Identifier", 0, 5, -1)
    " some time later ...
    " しばらくしてから ...
    call nvim_buf_clear_namespace(0, src, 0, -1)


==============================================================================
Floating windows						 *api-floatwin*

Floating windows ("floats") are displayed on top of normal windows.  This is
useful to implement simple widgets, such as tooltips displayed next to the
cursor. Floats are fully functional windows supporting user editing, common
|api-window| calls, and most window options (except 'statusline').
Floating windowは通常のウィンドウの上に表示されます。
カーソルの近くに表示されるウィンドウ等、シンプルなウィジェットを実装するのに
便利です。|api-window|の呼び出しやウィンドウオプション('statusline'を除く)等、
通常の編集機能を完全にサポートしています。

Two ways to create a floating window:
Floating windowを作成する2つの方法:
- |nvim_open_win()| creates a new window (needs a buffer, see |nvim_create_buf()|)
- |nvim_open_win()|で新しいウィンドウを作る。 
  (バッファが必要。|nvim_create_buf()|を参照。)
- |nvim_win_set_config()| reconfigures a normal window into a float
- |nvim_win_set_config()|で通常のウィンドウをFloating Windowに再設定する。

To close it use |nvim_win_close()| or a command such as |:close|.
ウィンドウを閉じるには|nvim_win_close()|を呼び出すか|:close|といったコマンドを
使用します。

Buffer text can be highlighted by typical mechanisms (syntax highlighting,
|api-highlights|). The |hl-NormalFloat| group highlights normal text;
'winhighlight' can be used as usual to override groups locally. Floats inherit
options from the current window; specify `style=minimal` in |nvim_open_win()|
to disable various visual features such as the 'number' column.
バッファのテキストは通常の方法(構文ハイライト、|api-highlights|)でハイライトする
ことができます。|hl-NormalFloat|グループは通常のテキストをハイライトします。
'winhighlight'は通常通り、ウィンドウローカルなハイライトグループを上書きでき
ます。カレントウィンドウのオプションを継承します。
|nvim_open_win()|で`style=minimal`を指定すると、'number'等の様々な視覚効果が
無効になります。

Currently, floating windows don't support widgets like border or scrollbar.
現在、Floating windowでは枠線やスクロールバー等の機能はサポートしていません。

Example: create a float with scratch buffer: >
例:バッファでFloating  windowを作成する:

    let buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(buf, 0, -1, v:true, ["test", "text"])
    let opts = {'relative': 'cursor', 'width': 10, 'height': 2, 'col': 0,
        \ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}
    let win = nvim_open_win(buf, 0, opts)
    " optional: change highlight, otherwise Pmenu is used
    " オプション: ハイライトを変更します。そうでなければPmenuが使われます。
    call nvim_win_set_option(win, 'winhl', 'Normal:MyHighlight')
>

==============================================================================
Extended marks						   *api-extended-marks*

Extended marks (extmarks) represent buffer annotations that track text changes
in the buffer. They could be used to represent cursors, folds, misspelled
words, and anything else that needs to track a logical location in the buffer
over time.
Extended marks(extmarks)はバッファのテキスト変更に追従するバッファ注釈です。
カーソル、折り畳み、スペルミスの単語等、バッファ内の論理的な位置を継続的に追う
必要のあるものを表すために使用できます。

Example:
例:

We will set an extmark at the first row and third column. |api-indexing| is
zero-indexed, so we use row=0 and column=2. Passing id=0 creates a new mark
and returns the id: >
1行目の3列目にExtmarkをセットします。|api-indexing|は0から始まるため、行に0、
列に2を指定します。

    let g:mark_ns = nvim_create_namespace('myplugin')
    let g:mark_id = nvim_buf_set_extmark(0, g:mark_ns, 0, 0, 2, {})

We can get a mark by its id: >
idからマークを取得する:

    echo nvim_buf_get_extmark_by_id(0, g:mark_ns, g:mark_id)
    => [0, 2]

We can get all marks in a buffer for our namespace (or by a range): >
ネームスペース(範囲指定も可)に含まれるバッファ内のすべてのマークを取得する:

    echo nvim_buf_get_extmarks(0, g:mark_ns, 0, -1, {})
    => [[1, 0, 2]]

Deleting all text surrounding an extmark does not remove the extmark. To
remove an extmark use |nvim_buf_del_extmark()|.
Extmarkが含まれるテキストを削除してもExtmarkは削除されません。
Extmarkを削除するには|nvim_buf_del_extmark()|を使用してください。

Namespaces allow your plugin to manage only its own extmarks, ignoring those
created by another plugin.
ネームスペースを使用すると、別のプラグインで作られたマークを気にすることなく利用
できます。

Extmark positions changed by an edit will be restored on undo/redo. Creating
and deleting extmarks is not a buffer change, thus new undo states are not
created for extmark changes.
Extmarkの位置が編集によって変っても、アンドゥ/リドゥで復元されます。
Extmarkの作成と削除はバッファの変更ではないため、アンドゥ/リドゥはできません。

==============================================================================
Global Functions                                                  *api-global*

nvim_exec({src}, {output})                                       *nvim_exec()*
                Executes Vimscript (multiline block of Ex-commands), like
                anonymous |:source|.
                |:source|の様にVimscript(複数行のEXコマンド)を実行します。

                Unlike |nvim_command()| this function supports heredocs,
                script-scope (s:), etc.
                |nvim_command()|とは異なりヒアドキュメントやスクリプトスコープ
                (s:)等をサポートします。

                On execution error: fails with VimL error, does not update
                v:errmsg.
                実行エラー時: 関数は失敗し、v:errmsgは更新されません。

                Parameters: ~
                    {src}     Vimscript code
                    {src}     Vimscriptコード
                    {output}  Capture and return all (non-error, non-shell
                              |:!|) output
                    {output}  すべての出力(エラーとshell(|:!|)を除く)を
                              キャプチャして返す。

                Return: ~
                    Output (non-error, non-shell |:!|) if `output` is true,
                    else empty string.
                    `output`がtrueならoutput(エラーとshell(:!)を除く)を返す。
                    それ以外なら空の文字列を返す。

                See also: ~
                    |execute()|
                    |nvim_command()|

nvim_command({command})                                       *nvim_command()*
                Executes an ex-command.
                1つのEXコマンドを実行します。

                On execution error: fails with VimL error, does not update
                v:errmsg.
                実行エラー時: 関数は失敗し、v:errmsgは更新されません。

                Parameters: ~
                    {command}  Ex-command string
                    {command}  Exコマンドstring

                See also: ~
                    |nvim_exec()|

nvim_get_hl_by_name({name}, {rgb})                     *nvim_get_hl_by_name()*
                Gets a highlight definition by name.
                名前からハイライト定義を取得します。

                Parameters: ~
                    {name}  Highlight group name
                    {name}  ハイライトグループ名
                    {rgb}   Export RGB colors
                    {rgb}   RBGカラーの出力

                Return: ~
                    Highlight definition map
                    ハイライト定義Map

                See also: ~
                    |nvim_get_hl_by_id()|

nvim_get_hl_by_id({hl_id}, {rgb})                        *nvim_get_hl_by_id()*
                Gets a highlight definition by id. |hlID()|
                IDからハイライト定義を取得します。|hlID()|

                Parameters: ~
                    {hl_id}  Highlight id as returned by |hlID()|
                    {hl_id}  |hlID()|が返すID。
                    {rgb}    Export RGB colors
                    {rgb}    RBGカラーの出力

                Return: ~
                    Highlight definition map
                    ハイライト定義Map

                See also: ~
                    |nvim_get_hl_by_name()|

nvim_feedkeys({keys}, {mode}, {escape_csi})                  *nvim_feedkeys()*
                Sends input-keys to Nvim, subject to various quirks controlled
                by `mode` flags. This is a blocking call, unlike
                |nvim_input()|.
                入力キーをNvimに送ります。`mode`フラグで挙動を制御できます。
                |nvim_input()|と異なりブロッキングコールです。

                On execution error: does not fail, but updates v:errmsg.
                エラー発生時:関数は失敗せず、v:errmsgが更新されます。

                Parameters: ~
                    {keys}        to be typed
                    {keys}        入力するキー。
                    {mode}        behavior flags, see |feedkeys()|
                    {mode}        フラグ。|feedkeys()|を参照。
                    {escape_csi}  If true, escape K_SPECIAL/CSI bytes in
                                  `keys`
                    {escape_csi}  trueの時、`keys`のK_SPECIAL/CSIバイトを
                                  エスケープする。

                See also: ~
                    |feedkeys()|
                    vim_strsave_escape_csi

nvim_input({keys})                                              *nvim_input()*
                Queues raw user-input. Unlike |nvim_feedkeys()|, this uses a
                low-level input buffer and the call is non-blocking (input is
                processed asynchronously by the eventloop).
                ユーザー入力をキューに入れます。|nvim_feedkeys()|と異なり、
                低レベルの入力バッファを使用しノンブロッキングで呼び出されます。
                (入力はイベントループによって非同期に処理されます。)

                On execution error: does not fail, but updates v:errmsg.
                エラー発生時:関数は失敗せず、v:errmsgが更新されます。

                Note:
                    |keycodes| like <CR> are translated, so "<" is special. To
                    input a literal "<", send <LT>.
                    <CR>のような|keycodes|は変換されます。"<"は特別です。
                    "<"を入力するには<LT>を使います。
                Note:
                    For mouse events use |nvim_input_mouse()|. The pseudokey
                    form "<LeftMouse><col,row>" is deprecated since
                    |api-level| 6.
                    マウスイベントは|nvim_input_mouse()|を使用してください。
                    疑似キー形式"<LeftMouse><col,row>"はAPIレベル6から非推奨に
                    なりました。

                Attributes: ~
                    {fast}

                Parameters: ~
                    {keys}  to be typed
                    {keys}  入力するキー。

                Return: ~
                    Number of bytes actually written (can be fewer than
                    requested if the buffer becomes full).
                    実際に書き込まれたバイト数。(バッファがいっぱいになった場合
                    は実際より少なくなることがあります。)

                                                          *nvim_input_mouse()*
nvim_input_mouse({button}, {action}, {modifier}, {grid}, {row}, {col})
                Send mouse event from GUI.
                GUIからマウスイベントを送ります。

                Non-blocking: does not wait on any result, but queues the
                event to be processed soon by the event loop.
                ノンブロッキング:結果を待ちませんが、イベントループによってすぐ
                に処理されるようにマウスイベントをキューに入れます。

                Note:
                    Currently this doesn't support "scripting" multiple mouse
                    events by calling it multiple times in a loop: the
                    intermediate mouse positions will be ignored. It should be
                    used to implement real-time mouse input in a GUI. The
                    deprecated pseudokey form ("<LeftMouse><col,row>") of
                    |nvim_input()| has the same limitiation.
                    現在、ループ内で複数のマウスイベントを呼び出すスクリプトの
                    ようなことはできません。マウスの中間位置は無視されます。
                    GUIでリアルタイムのマウス入力を実装するために使用します。
                    |nvim_input()|の非推奨な疑似キー("<LeftMouse><col,row>")も
                    同様の制限があります。

                Attributes: ~
                    {fast}

                Parameters: ~
                    {button}    Mouse button: one of "left", "right",
                                "middle", "wheel".
                    {button}    マウスボタン: "left", "right", "middle",
                                "wheel"のうち1つ
                    {action}    For ordinary buttons, one of "press", "drag",
                                "release". For the wheel, one of "up", "down",
                                "left", "right".
                    {action}    ボタンの場合: "press", "drag", "release"のうち
                                1つ。
                                ホイールの場合: "up", "down", "left", "right"の
                                うち1つ。
                    {modifier}  String of modifiers each represented by a
                                single char. The same specifiers are used as
                                for a key press, except that the "-" separator
                                is optional, so "C-A-", "c-a" and "CA" can all
                                be used to specify Ctrl+Alt+click.
                    {modifier}  1つの文字で表される修飾子キー。"-"が任意なことを
                                除き、キー入力と同じです。そのため、"C-A-",
                                "c-a", "CA"を使用してCtrl+Alt+クリックを指定でき
                                ます。
                    {grid}      Grid number if the client uses |ui-multigrid|,
                                else 0.
                    {grid}      クライアントが|ui-multigrid|を使用している場合
                                グリッドナンバー。それ以外は0。
                    {row}       Mouse row-position (zero-based, like redraw
                                events)
                    {row}       マウスの行位置(redrawイベントのように0ベース)。
                    {col}       Mouse column-position (zero-based, like redraw
                                events)
                    {col}       マウスの列位置(redrawイベントのように0ベース)。

                                                    *nvim_replace_termcodes()*
nvim_replace_termcodes({str}, {from_part}, {do_lt}, {special})
                Replaces terminal codes and |keycodes| (<CR>, <Esc>, ...) in a
                string with the internal representation.
                文字列内の端末コードとキーコード(|keycodes| <CR>,<Esc>等)を
                内部表現に置き変えます。

                Parameters: ~
                    {str}        String to be converted.
                    {str}        変換する文字列。
                    {from_part}  Legacy Vim parameter. Usually true.
                    {from_part}  古いVimパラメータ。通常はtrue。
                    {do_lt}      Also translate <lt>. Ignored if `special` is
                                 false.
                    {do_lt}      <lt>も変換する。`special`がfalseなら無視される。
                    {special}    Replace |keycodes|, e.g. <CR> becomes a "\n"
                                 char.
                    {special}    <CR>を"\n"のように|keycodes|を置き変える。

                See also: ~
                    replace_termcodes
                    |cpoptions|

nvim_eval({expr})                                                *nvim_eval()*
                Evaluates a VimL |expression|. Dictionaries and Lists are
                recursively expanded.
                VimL式(|expression|)を評価します。辞書とリストは再帰的に展開され
                ます。

                On execution error: fails with VimL error, does not update
                v:errmsg.
                エラー発生時:関数は失敗し、v:errmsgは更新されません。

                Parameters: ~
                    {expr}  VimL expression string
                    {expr}  VimL式の文字列。

                Return: ~
                    Evaluation result or expanded object
                    評価結果か展開されたオブジェクト。

nvim_exec_lua({code}, {args})                                *nvim_exec_lua()*
                Execute Lua code. Parameters (if any) are available as `...`
                inside the chunk. The chunk can return a value.
                Luaコードを実行します。パラメータ(もしあれば)はチャンク内で`...`
                として使用できます。チャンクは値を返すことができます。

                Only statements are executed. To evaluate an expression,
                prefix it with `return` : return my_function(...)
                文のみが実行されます。式を評価するには`retuen`にプレフィックスを
                つけます。: return my_function( ... )

                Parameters: ~
                    {code}  Lua code to execute
                    {code}  実行するLuaコード。
                    {args}  Arguments to the code
                    {args}  コードへの引数。

                Return: ~
                    Return value of Lua code if present or NIL.
                    Luaコードの戻り値。またはNIL。

nvim_call_function({fn}, {args})                        *nvim_call_function()*
                Calls a VimL function with the given arguments.
                指定された引数でVimL関数を呼びます。

                On execution error: fails with VimL error, does not update
                v:errmsg.
                エラー発生時:関数は失敗し、v:errmsgは更新されません。

                Parameters: ~
                    {fn}    Function to call
                    {fn}    呼び出す関数。
                    {args}  Function arguments packed in an Array
                    {args}  配列にまとめた引数。

                Return: ~
                    Result of the function call
                    関数を呼んだ結果。

nvim_call_dict_function({dict}, {fn}, {args})      *nvim_call_dict_function()*
                Calls a VimL |Dictionary-function| with the given arguments.
                指定された引数でVimLの|Dictionary-function|を呼びます。

                On execution error: fails with VimL error, does not update
                v:errmsg.
                エラー発生時:関数は失敗し、v:errmsgは更新されません。

                Parameters: ~
                    {dict}  Dictionary, or String evaluating to a VimL |self|
                            dict
                    {dict}  辞書、または|self|辞書を評価する文字列。
                    {fn}    Name of the function defined on the VimL dict
                    {fn}    VimL辞書で定義された関数名。
                    {args}  Function arguments packed in an Array
                    {args}  配列にまとめた引数。

                Return: ~
                    Result of the function call
                    関数を呼んだ結果。

nvim_strwidth({text})                                        *nvim_strwidth()*
                Calculates the number of display cells occupied by `text` .
                <Tab> counts as one cell.
                `text`が占める表示セルの数を計算します。<Tab>は1つのセルとして
                カウントされます。

                Parameters: ~
                    {text}  Some text
                    {text}  テキスト。

                Return: ~
                    Number of cells
                    セルの数。

nvim_list_runtime_paths()                          *nvim_list_runtime_paths()*
                Gets the paths contained in 'runtimepath'.
                |'runtimepath'|に含まれるパスを取得します。

                Return: ~
                    List of paths
                    パスのリスト。

nvim_set_current_dir({dir})                           *nvim_set_current_dir()*
                Changes the global working directory.
                グローバルな作業ディレクトリを変更します。

                Parameters: ~
                    {dir}  Directory path
                    {dir}  ディレクトリパス。

nvim_get_current_line()                              *nvim_get_current_line()*
                Gets the current line.
                現在行を取得します。

                Return: ~
                    Current line string
                    現在行の文字列。

nvim_set_current_line({line})                        *nvim_set_current_line()*
                Sets the current line.
                現在行を置き変えます。

                Parameters: ~
                    {line}  Line contents
                    {line}  行の内容。

nvim_del_current_line()                              *nvim_del_current_line()*
                Deletes the current line.
                現在行を削除します。

nvim_get_var({name})                                          *nvim_get_var()*
                Gets a global (g:) variable.
                グローバル(|g:|)変数を取得します。

                Parameters: ~
                    {name}  Variable name
                    {name}  変数名。

                Return: ~
                    Variable value
                    変数名。

nvim_set_var({name}, {value})                                 *nvim_set_var()*
                Sets a global (g:) variable.
                グローバル(|g:|)変数に値をセットします。

                Parameters: ~
                    {name}   Variable name
                    {name}   変数名。
                    {value}  Variable value
                    {value}  変数の値。

nvim_del_var({name})                                          *nvim_del_var()*
                Removes a global (g:) variable.
                グローバル(|g:|)変数を削除します。

                Parameters: ~
                    {name}  Variable name
                    {name}  変数名。

nvim_get_vvar({name})                                        *nvim_get_vvar()*
                Gets a v: variable.
                定義済み変数(|v:|)を取得します。

                Parameters: ~
                    {name}  Variable name
                    {name}  変数名。

                Return: ~
                    Variable value
                    変数の値。

nvim_set_vvar({name}, {value})                               *nvim_set_vvar()*
                Sets a v: variable, if it is not readonly.
                読み取り専用でなければ、定義済み変数(|v:|)に値をセットします。

                Parameters: ~
                    {name}   Variable name
                    {name}   変数名。
                    {value}  Variable value
                    {value}  変数の値。

nvim_get_option({name})                                    *nvim_get_option()*
                Gets an option value string.
                オプションの値を取得します。

                Parameters: ~
                    {name}  Option name
                    {name}  オプション名。

                Return: ~
                    Option value (global)
                    オプションの値。(グローバル)

nvim_set_option({name}, {value})                           *nvim_set_option()*
                Sets an option value.
                オプションに値をセットします。

                Parameters: ~
                    {name}   Option name
                    {name}   オプション名。
                    {value}  New option value
                    {value}  新しい値。

nvim_out_write({str})                                       *nvim_out_write()*
                Writes a message to the Vim output buffer. Does not append
                "\n", the message is buffered (won't display) until a linefeed
                is written.
                Vimの出力バッファにメッセージを書き込みます。"\n"を追加しない
                場合、"\n"が書き込まれるまでバッファリングされます(表示されませ
                ん)。

                Parameters: ~
                    {str}  Message
                    {str}  メッセージ

nvim_err_write({str})                                       *nvim_err_write()*
                Writes a message to the Vim error buffer. Does not append
                "\n", the message is buffered (won't display) until a linefeed
                is written.
                Vimのエラーバッファにメッセージを書き込みます。"\n"を追加しない
                場合、"\n"が書き込まれるまでバッファリングされます(表示されませ
                ん)。

                Parameters: ~
                    {str}  Message
                    {str}  メッセージ

nvim_err_writeln({str})                                   *nvim_err_writeln()*
                Writes a message to the Vim error buffer. Appends "\n", so the
                buffer is flushed (and displayed).
                Vimのエラーバッファにメッセージを書き込みます。"\n"を追加し、
                バッファはフラッシュされます(表示されます)。

                Parameters: ~
                    {str}  Message
                    {str}  メッセージ

                See also: ~
                    |nvim_err_write()|

nvim_list_bufs()                                            *nvim_list_bufs()*
                Gets the current list of buffer handles
                現在のバッファハンドルのリストを取得します。

                Includes unlisted (unloaded/deleted) buffers, like `:ls!` .
                `:ls!`のようにバッファリストにない(非ロード、削除された)バッファ
                も含まれます。
                Use |nvim_buf_is_loaded()| to check if a buffer is loaded.
                |nvim_buf_is_loaded()|を使用してバッファがロードされているかを
                確認します。

                Return: ~
                    List of buffer handles
                    バッファハンドルのリスト。

nvim_get_current_buf()                                *nvim_get_current_buf()*
                Gets the current buffer.
                カレントバッファを取得します。

                Return: ~
                    Buffer handle
                    バッファハンドル。

nvim_set_current_buf({buffer})                        *nvim_set_current_buf()*
                Sets the current buffer.
                カレントバッファをセットします。

                Parameters: ~
                    {buffer}  Buffer handle
                    {buffer}  バッファハンドル。

nvim_list_wins()                                            *nvim_list_wins()*
                Gets the current list of window handles.
                現在のウィンドウハンドルのリストを取得します。

                Return: ~
                    List of window handles
                    ウィンドウハンドルのリスト。

nvim_get_current_win()                                *nvim_get_current_win()*
                Gets the current window.
                カレントウィンドウを取得します。

                Return: ~
                    Window handle
                    ウィンドウハンドル。

nvim_set_current_win({window})                        *nvim_set_current_win()*
                Sets the current window.
                カレントウィンドウをセットします。

                Parameters: ~
                    {window}  Window handle
                    {window}  ウィンドウハンドル。

nvim_create_buf({listed}, {scratch})                       *nvim_create_buf()*
                Creates a new, empty, unnamed buffer.
                空の無名バッファを作成します。

                Parameters: ~
                    {listed}   Sets 'buflisted'
                    {listed}   'buflisted'を設定します。
                    {scratch}  Creates a "throwaway" |scratch-buffer| for
                               temporary work (always 'nomodified')
                    {scratch}  一時的な作業用の"使い捨ての"スクラッチバッファ(|scratch-buffer|)
                               を作成します(常に'nomodified')。

                Return: ~
                    Buffer handle, or 0 on error
                    バッファハンドル。エラーなら0。

                See also: ~
                    buf_open_scratch

nvim_open_win({buffer}, {enter}, {config})                   *nvim_open_win()*
                Open a new window.
                新しいウィンドウを開きます。

                Currently this is used to open floating and external windows.
                Floats are windows that are drawn above the split layout, at
                some anchor position in some other window. Floats can be drawn
                internally or by external GUI with the |ui-multigrid|
                extension. External windows are only supported with multigrid
                GUIs, and are displayed as separate top-level windows.
                現在、Floating windowと外部ウィンドウを開くために使用されていま
                す。Floating windowは他のウィンドウのアンカー位置に描画される
                ウィンドウです。内部的に描画することも、|ui-multigrid|拡張を備え
                た外部GUIで描画することもできます。外部ウィンドウは、マルチ
                グリッドGUIでのみサポートされ、独立したトップレベルウィンドウと
                して表示されます。

                For a general overview of floats, see |api-floatwin|.
                Floating windowsの概要は、|api-floatwin|を参照してください。

                Exactly one of `external` and `relative` must be specified.
                The `width` and `height` of the new window must be specified.
                `external`か`relative`を指定する必要があります。
                新しいウィンドウの`width`と`height`を指定する必要があります。

                With relative=editor (row=0,col=0) refers to the top-left
                corner of the screen-grid and (row=Lines-1,col=Columns-1)
                refers to the bottom-right corner. Fractional values are
                allowed, but the builtin implementation (used by non-multigrid
                UIs) will always round down to nearest integer.
                relative=editor (row=0,col=0)はスクリーングリッドの左上角を参照
                し、(row=Lines-1,col=Columns-1)は右下角を参照します。小数を使用
                できますが、組み込み実装(非マルチグリッドUI)では近い値が使われま
                す。

                Out-of-bounds values, and configurations that make the float
                not fit inside the main editor, are allowed. The builtin
                implementation truncates values so floats are fully within the
                main screen grid. External GUIs could let floats hover outside
                of the main window like a tooltip, but this should not be used
                to specify arbitrary WM screen positions.
                範囲外の値、エディタ内に収まらないFloating windowの設定は許可
                されます。組み込み実装ではスクリーングリッドに収まるように切り捨
                てられます。外部GUIではツールチップのようにメインウインドウの外
                に表示できますが、これを任意のWMスクリーン位置の指定に使用しない
                でください。

                Example (Lua): window-relative float >
                例(Lua): window-relative float
                    vim.api.nvim_open_win(0, false,
                      {relative='win', row=3, col=3, width=12, height=3})
<

                Example (Lua): buffer-relative float (travels as buffer is
                scrolled) >
                例(Lua): buffer-relative float(バッファがスクロールされると移動します。)
                    vim.api.nvim_open_win(0, false,
                      {relative='win', width=12, height=3, bufpos={100,10}})
<

                Parameters: ~
                    {buffer}  Buffer to display, or 0 for current buffer
                    {buffer}  表示するバッファ。0でカレントバッファ。
                    {enter}   Enter the window (make it the current window)
                    {enter}   ウィンドウに入る(カレントウィンドウにする)。
                    {config}  Map defining the window configuration. Keys:
                    {config}  設定を定義したMap。Keys:
                              •  `relative` : Sets the window layout to "floating", placed
                                at (row,col) coordinates relative to:
                              •  `relative` :ウィンドウレイアウトを"floating"に
                                 設定し、(row,col)座標に配置します。:
                                • "editor" The global editor grid
                                • "editor" グローバルなエディタグリッド。
                                • "win" Window given by the `win` field, or
                                  current window.
                                • "win" `win`フィールドで指定されたウィンドウ。
                                   またはカレントウィンドウ。
                                • "cursor" Cursor position in current window.
                                • "cursor" カレントウィンドウのカーソル位置。

                              • `win` : |window-ID| for relative="win".
                              • `win` : relative="win"の|window-ID|。
                              •  `anchor` : Decides which corner of the float to place
                                at (row,col):
                              •  `anchor` : (row,col)の位置をFloating windowの
                                  どこにするかを決める。
                                • "NW" northwest (default)
                                • "NW" 北西 (デフォルト)。
                                • "NE" northeast
                                • "NE" 北東。
                                • "SW" southwest
                                • "SW" 南西。
                                • "SE" southeast
                                • "SE" 南東。

                              • `width` : Window width (in character cells).
                                Minimum of 1.
                              • `width` : ウィンドウ幅(文字セル単位)。最小は1。
                              • `height` : Window height (in character cells).
                                Minimum of 1.
                              • `height` : ウィンドウ高さ(文字セル単位)。
                                 最小は1。
                              • `bufpos` : Places float relative to buffer
                                text (only when relative="win"). Takes a tuple
                                of zero-indexed [line, column]. `row` and
                                `col` if given are applied relative to this
                                position, else they default to `row=1` and
                                `col=0` (thus like a tooltip near the buffer
                                text).
                              • `bufpos` : バッファテキストを基準にFloating
                                 windowを配置します(relative="win"の時のみ)。
                                 0から始まる[line, column]のタプルを取ります。
                                 `row`と`col`が指定されている場合その位置が適用
                                 されます。それ以外の場合はデフォルトで`row`=1,
                                 `col`=0になります。(バッファテキスト近くのツー
                                 ルチップのようになります。)
                              • `row` : Row position in units of "screen cell
                                height", may be fractional.
                              • `row` : 画面セルの高さを単位とする行の位置。
                                 小数になるかもしれません。
                              • `col` : Column position in units of "screen
                                cell width", may be fractional.
                              • `col` : 画面セルの幅を単位とする列の位置。
                                 小数になるかもしれません。
                              • `focusable` : Enable focus by user actions
                                (wincmds, mouse events). Defaults to true.
                                Non-focusable windows can be entered by
                                |nvim_set_current_win()|.
                              • `focusable` : ユーザー操作によってフォーカスを
                                 許可するかどうか(ウィンドウコマンド、マウスイベ
                                 ント)。デフォルトはtrue。フォーカスできないウィ
                                 ンドウは、|nvim_set_current_win()|で入ることが
                                 できます。
                              • `external` : GUI should display the window as
                                an external top-level window. Currently
                                accepts no other positioning configuration
                                together with this.
                              • `external` : GUIは外部のトップレベルウィンドウ
                                 として表示する必要があります。現在、他の位置を
                                 決めるオプションと同時に指定できません。
                              •  `style` : Configure the appearance of the window.
                                Currently only takes one non-empty value:
                              •  `style` : ウィンドウの外観を設定します。現在、
                                  空ではない値を1つだけ受け取ります。:
                                • "minimal" Nvim will display the window with
                                  many UI options disabled. This is useful
                                  when displaying a temporary float where the
                                  text should not be edited. Disables
                                  'number', 'relativenumber', 'cursorline',
                                  'cursorcolumn', 'foldcolumn', 'spell' and
                                  'list' options. 'signcolumn' is changed to
                                  `auto` and 'colorcolumn' is cleared. The
                                  end-of-buffer region is hidden by setting
                                  `eob` flag of 'fillchars' to a space char,
                                  and clearing the |EndOfBuffer| region in
                                  'winhighlight'.
                                • "minimal" 多くのUIオプションを無効にして表示
                                   します。テキストを編集しない一時的なFloating
                                   windowとして使用するのに便利です。無効になる
                                   オプションは、'number', 'relativenumber',
                                   'cursorline', 'cursorcolumn', 'foldcolumn',
                                   'spell', 'list'です。'signcolumn'は`auto`に
                                   変更され、'colorcolumn'は削除されます。
                                   バッファ終端領域を非表示にするには'fillchars'
                                   の`eob`フラグを空白文字に設定し、'winhighlight'
                                   の|EndOfBuffer|を削除します。

                Return: ~
                    Window handle, or 0 on error
                    ウィンドウハンドル。エラー時は0。

nvim_list_tabpages()                                    *nvim_list_tabpages()*
                Gets the current list of tabpage handles.
                現在のタブページハンドルのリストを取得します。

                Return: ~
                    List of tabpage handles
                    タブページハンドルのリスト。

nvim_get_current_tabpage()                        *nvim_get_current_tabpage()*
                Gets the current tabpage.
                現在のタブページハンドルを取得します。

                Return: ~
                    Tabpage handle
                    タブページハンドル。

nvim_set_current_tabpage({tabpage})               *nvim_set_current_tabpage()*
                Sets the current tabpage.
                現在のタブページをセットします。

                Parameters: ~
                    {tabpage}  Tabpage handle
                    {tabpage}  タブページハンドル。

nvim_create_namespace({name})                        *nvim_create_namespace()*
                Creates a new namespace, or gets an existing one.
                ネームスペースを作成するか、既存のものを取得します。

                Namespaces are used for buffer highlights and virtual text,
                see |nvim_buf_add_highlight()| and
                |nvim_buf_set_virtual_text()|.
                ネームスペースはバッファのハイライトとVirtual textで使用されます。
                |nvim_buf_add_highlight()|と|nvim_buf_set_virtual_text()|を参照。

                Namespaces can be named or anonymous. If `name` matches an
                existing namespace, the associated id is returned. If `name`
                is an empty string a new, anonymous namespace is created.
                ネームスペースは名前付きか匿名にできます。`name`が既存のネームス
                ペースと一致する場合、関連付けされたidが返されます。
                `name`が空の文字列の場合、新しい匿名のネームスペースが作られます。

                Parameters: ~
                    {name}  Namespace name or empty string
                    {name}  ネームスペース名または空の文字列。

                Return: ~
                    Namespace id
                    ネームスペースID

nvim_get_namespaces()                                  *nvim_get_namespaces()*
                Gets existing, non-anonymous namespaces.
                匿名ではない既存のネームスペースを取得します。

                Return: ~
                    dict that maps from names to namespace ids.
                    名前をkey、idをvalueとする辞書配列。

nvim_paste({data}, {crlf}, {phase})                             *nvim_paste()*
                Pastes at cursor, in any mode.
                任意のモードでカーソル位置に貼り付けします。

                Invokes the `vim.paste` handler, which handles each mode
                appropriately. Sets redo/undo. Faster than |nvim_input()|.
                Lines break at LF ("\n").
                各モードを適切に処理する`vim.paste`ハンドラーを呼び出します。
                LF("\n")で改行します。

                Errors ('nomodifiable', `vim.paste()` failure, …) are
                reflected in `err` but do not affect the return value (which
                is strictly decided by `vim.paste()` ). On error, subsequent
                calls are ignored ("drained") until the next paste is
                initiated (phase 1 or -1).
                エラー('nomodifiable', `vim.paste()`の失敗)は`err`に反映されます
                が、返り値に影響はありません(厳密には`vim.paste()`に決定される)。
                エラー発生時、次の貼り付けが開始(phase 0か-1)されるまでその後の
                呼び出しは無視("drained")されます。

                Parameters: ~
                    {data}   Multiline input. May be binary (containing NUL
                             bytes).
                    {data}   複数行の入力。バイナリ(NULバイトを含む)も可能。
                    {crlf}   Also break lines at CR and CRLF.
                    {crlf}   CRとCRLFで改行する。
                    {phase}  -1: paste in a single call (i.e. without
                             streaming). To "stream" a paste, call `nvim_paste` sequentially with these `phase` values:
                             • 1: starts the paste (exactly once)
                             • 2: continues the paste (zero or more times)
                             • 3: ends the paste (exactly once)
                    {phase}  -1: 1回の呼び出しで貼り付け(ストリームではない)。
                             ストリームとして貼り付けするにはこれらの`phase`値で
                             `nvim_paste`を順番に呼び出す。:
                             • 1: 貼り付け開始(1回だけ)
                             • 2: 貼り付けを続行(0回以上)
                             • 3: 貼り付け終了(1回だけ)

                Return: ~
                    • true: Client may continue pasting.
                    • false: Client must cancel the paste.
                    • true: クライアントは貼り付けを続行できます。
                    • false:クライアントは貼り付けをキャンセルする必要が
                      あります。

nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*
                Puts text at cursor, in any mode.
                任意のモードでカーソル位置にテキストを挿入します。

                Compare |:put| and |p| which are always linewise.
                常に行単位である|:put|と|p|を比較してください。

                Parameters: ~
                    {lines}   |readfile()|-style list of lines.
                              |channel-lines|
                    {lines}   |readfile()|形式の行のリスト。|channel-lines|
                    {type}    Edit behavior: any |getregtype()| result, or:
                              • "b" |blockwise-visual| mode (may include
                                width, e.g. "b3")
                              • "c" |charwise| mode
                              • "l" |linewise| mode
                              • "" guess by contents, see |setreg()|
                    {type}    動作を編集: |getregtype()|の結果。または:
                              • "b" |blockwise-visual|モード。("b3"のように幅を
                                含むことができる)
                              • "c" |charwise|モード。
                              • "l" |linewise|モード。
                              • "" 内容から推測する。|setreg()|を参照。
                    {after}   Insert after cursor (like |p|), or before (like
                              |P|).
                    {after}   カーソルの後ろに挿入する(|p|のように)。または、
                              前に挿入する(|P|のように)。
                    {follow}  Place cursor at end of inserted text.
                    {follow}  挿入されたテキストの最後にカーソルを置く。

nvim_subscribe({event})                                     *nvim_subscribe()*
                Subscribes to event broadcasts.
                イベントブロードキャストを購読します。

                Parameters: ~
                    {event}  Event type string

nvim_unsubscribe({event})                                 *nvim_unsubscribe()*
                Unsubscribes to event broadcasts.
                イベントブロードキャストの購読を解除します。

                Parameters: ~
                    {event}  Event type string

nvim_get_color_by_name({name})                      *nvim_get_color_by_name()*
                Returns the 24-bit RGB value of a |nvim_get_color_map()| color
                name or "#rrggbb" hexadecimal string.
                |nvim_get_color_map()|の色名か"#rrggbb"のような16進文字列の
                24ビットRGB値を返します。

                Example: >
                例:
                    :echo nvim_get_color_by_name("Pink")
                    :echo nvim_get_color_by_name("#cbcbcb")
<

                Parameters: ~
                    {name}  Color name or "#rrggbb" string
                    {name}  色名または、"#rrggbb"のような文字列。

                Return: ~
                    24-bit RGB value, or -1 for invalid argument.
                    24ビットRGB値。無効な引数の場合は-1。

nvim_get_color_map()                                    *nvim_get_color_map()*
                Returns a map of color names and RGB values.
                色名とRGB値のMapを返します。

                Keys are color names (e.g. "Aqua") and values are 24-bit RGB
                color values (e.g. 65535).
                keyは色名(例"Aqua")、valueは24ビットRGB値(例 65535)です。

                Return: ~
                    Map of color names and RGB values.
                    色名とRGB値のMap

nvim_get_context({opts})                                  *nvim_get_context()*
                Gets a map of the current editor state.
                現在のエディタの状態を取得します。

                Parameters: ~
                    {opts}  Optional parameters.
                            • types: List of |context-types| ("regs", "jumps",
                              "bufs", "gvars", …) to gather, or empty for
                              "all".
                    {opts}  オプションのパラメーター。
                            • types:|context-types|のリスト ("regs", "jumps",
                              "bufs", "gvars", …)。空の場合は全て。

                Return: ~
                    map of global |context|.

nvim_load_context({dict})                                *nvim_load_context()*
                Sets the current editor state from the given |context| map.
                指定された|context|のMapから現在のエディタの状態を設定します。

                Parameters: ~
                    {dict}  |Context| map.

nvim_get_mode()                                              *nvim_get_mode()*
                Gets the current mode. |mode()| "blocking" is true if Nvim is
                waiting for input.
                現在のモードを取得します。Nvimが入力を待っている場合、
                |mode()| "blocking"はtrueになります。

                Return: ~
                    Dictionary { "mode": String, "blocking": Boolean }
                    辞書 { "mode": String, "blocking": Boolean }

                Attributes: ~
                    {fast}

nvim_get_keymap({mode})                                    *nvim_get_keymap()*
                Gets a list of global (non-buffer-local) |mapping|
                definitions.
                グローバル(バッファローカルでない)な|mapping|定義を取得します。

                Parameters: ~
                    {mode}  Mode short-name ("n", "i", "v", ...)
                    {mode}  モードの短縮名("n", "i", "v", ...)

                Return: ~
                    Array of maparg()-like dictionaries describing mappings.
                    The "buffer" key is always zero.
                    |maparg()|のようなマッピングを記述した辞書配列。
                    "buffer" keyは常に0。

nvim_set_keymap({mode}, {lhs}, {rhs}, {opts})              *nvim_set_keymap()*
                Sets a global |mapping| for the given mode.
                与えられたモードのグローバル|mapping|を設定します。

                To set a buffer-local mapping, use |nvim_buf_set_keymap()|.
                バッファローカルなマッピングを設定するには、|nvim_buf_set_keymap()|
                を使用してください。

                Unlike |:map|, leading/trailing whitespace is accepted as part
                of the {lhs} or {rhs}. Empty {rhs} is |<Nop>|. |keycodes| are
                replaced as usual.
                |:map|と異なり、先頭/末尾の空白は{lhs}または{rhs}の一部として
                受け入れられます。空の{rhs}は|<Nop>|です。|keycodes|は通常通りに
                置き換えられます。

                Example: >
                例:
                    call nvim_set_keymap('n', ' <NL>', '', {'nowait': v:true})
<

                is equivalent to: >
                上記は下記と同等:
                    nmap <nowait> <Space><NL> <Nop>
<

                Parameters: ~
                    {mode}  Mode short-name (map command prefix: "n", "i",
                            "v", "x", …) or "!" for |:map!|, or empty string
                            for |:map|.
                    {mode}  モードの短縮名(map command prefix: "n", "i",
                            "v", "x", …)または、|:map!|の"！"または、|:map|の
                            空文字列。
                    {lhs}   Left-hand-side |{lhs}| of the mapping.
                    {lhs}   マッピングの左側。(Left-hand-side |{lhs}|)
                    {rhs}   Right-hand-side |{rhs}| of the mapping.
                    {rhs}   マッピングの右側。(Right-hand-side |{rhs}|)
                    {opts}  Optional parameters map. Accepts all
                            |:map-arguments| as keys excluding |<buffer>| but
                            including |noremap|. Values are Booleans. Unknown
                            key is an error.
                    {opts}  オプションのパラメーターMap。|<buffer>|を除くすべて
                            の|:map-arguments|をキーとして受け入れます。
                            |<noremap>|というキーも受け入れます。 valueはbool値
                            です。不明なkeyはエラーになります。

nvim_del_keymap({mode}, {lhs})                             *nvim_del_keymap()*
                Unmaps a global |mapping| for the given mode.
                与えられたモードのグローバル|mapping|を削除します。

                To unmap a buffer-local mapping, use |nvim_buf_del_keymap()|.
                バッファローカルなマップを削除する場合は、|nvim_buf_del_keymap()|
                を使用してください。

                See also: ~
                    |nvim_set_keymap()|

nvim_get_commands({opts})                                *nvim_get_commands()*
                Gets a map of global (non-buffer-local) Ex commands.
                グローバル(バッファローカルでない)なEXコマンドのMapを取得します。

                Currently only |user-commands| are supported, not builtin Ex
                commands.
                現在、|user-commands|のみサポートされています。
                組み込みのEXコマンドではありません。

                Parameters: ~
                    {opts}  Optional parameters. Currently only supports
                            {"builtin":false}
                    {opts}  オプションのパラメータ。現在は1つのみサポート
                            {"builtin":false}

                Return: ~
                    Map of maps describing commands.
                    コマンドの辞書のMap。

nvim_get_api_info()                                      *nvim_get_api_info()*
                Returns a 2-tuple (Array), where item 0 is the current channel
                id and item 1 is the |api-metadata| map (Dictionary).
                2要素タプル(配列)を返します。アイテム0は現在のチャンネルID、
                アイテム0は|api-metadata|辞書です。

                Return: ~
                    2-tuple [{channel-id}, {api-metadata}]

                Attributes: ~
                    {fast}

                                                      *nvim_set_client_info()*
nvim_set_client_info({name}, {version}, {type}, {methods},
                     {attributes})
                Self-identifies the client.
                クライアントを自己認識します。

                The client/plugin/application should call this after
                connecting, to provide hints about its identity and purpose,
                for debugging and orchestration.
                クライアント/プラグイン/アプリケーションは接続後、デバッグと
                オーケストレーションのために、アイデンティティと目的のヒント
                を提供するために呼び出す必要があります。

                Can be called more than once; the caller should merge old info
                if appropriate. Example: library first identifies the channel,
                then a plugin using that library later identifies itself.
                複数回呼び出すことができます。呼び出し元は、必要に応じて古い情報
                をマージする必要があります。例:ライブラリは最初にチャンネルを
                識別し、次にそのライブラリを使用するプラグインが識別します。

                Note:
                    "Something is better than nothing". You don't need to
                    include all the fields.
                    何もないよりはまし。すべてのフィールドを含める必要はありませ
                    ん。

                Parameters: ~
                    {name}        Short name for the connected client
                    {name}        接続されたクライアントの短縮名。
                    {version}     Dictionary describing the version, with
                                  these (optional) keys:
                                  • "major" major version (defaults to 0 if
                                    not set, for no release yet)
                                  • "minor" minor version
                                  • "patch" patch number
                                  • "prerelease" string describing a
                                    prerelease, like "dev" or "beta1"
                                  • "commit" hash or similar identifier of
                                    commit
                    {version}     次のキー(オプション)を使用してバージョンを説明
                                  する辞書:
                                  • "major" メジャーバージョン (デフォルトは0
                                     設定されていない場合、まだリリースされてい
                                     ない)
                                  • "minor" マイナーバージョン。
                                  • "patch" パッチナンバー。
                                  • "prerelease" "dev"や"beta1"のように文字で
                                    説明するプレリリース。
                                  • "commit" コミットハッシュか類似の識別子。
                    {type}        Must be one of the following values. Client
                                  libraries should default to "remote" unless
                                  overridden by the user.
                                  • "remote" remote client connected to Nvim.
                                  • "ui" gui frontend
                                  • "embedder" application using Nvim as a
                                    component (for example, IDE/editor
                                    implementing a vim mode).
                                  • "host" plugin host, typically started by
                                    nvim
                                  • "plugin" single plugin, started by nvim
                    {type}        次の値のいずれかでなければいけません。ユーザー
                                  が上書きしない限り、クライアントライブラリは
                                  デフォルトで"remote"に設定する必要があります。
                                  • "remote" Nvimに接続されたリモートクライアント。
                                  • "ui" GUIフロントエンド。
                                  • "embedder" コンポーネントとしてNvimを使用す
                                    るアプリケーション(vimモードを実装するIDE/エ
                                    ディタ等)。
                                  • "host" 通常、Nvimによって起動されるプラグイ
                                    ンホスト。
                                  • "plugin" Nvimに起動された1つのプラグイン。
                    {methods}     Builtin methods in the client. For a host,
                                  this does not include plugin methods which
                                  will be discovered later. The key should be
                                  the method name, the values are dicts with
                                  these (optional) keys (more keys may be
                                  added in future versions of Nvim, thus
                                  unknown keys are ignored. Clients must only
                                  use keys defined in this or later versions
                                  of Nvim):
                                  • "async" if true, send as a notification.
                                    If false or unspecified, use a blocking
                                    request
                                  • "nargs" Number of arguments. Could be a
                                    single integer or an array of two
                                    integers, minimum and maximum inclusive.
                    {methods}     クライアント組み込みのメソッド。ホストの場合、
                                  後で検出されるプラグインメソッドは含まれません。
                                  キーはメソッド名である必要があり、値はこれらの
                                  (オプション)キーを持つ辞書です。(Nvimの将来の
                                  バージョンで更にキーが追加される可能性があるた
                                  め、不明なキーは無視されます。クライアントは、
                                  このバージョン以降のNvimで定義されているキー
                                  のみを使用する必要があります。):
                                  • "async" trueの場合、通知として送信します。
                                    falseか未定義の場合、ブロッキング要求を使用
                                    します。
                                  • "nargs" 引数の数。1つの整数、または最小値と
                                    最大値をを含む2つの整数の配列を指定できます。
                    {attributes}  Arbitrary string:string map of informal
                                  client properties. Suggested keys:
                                  • "website": Client homepage URL (e.g.
                                    GitHub repository)
                                  • "license": License description ("Apache
                                    2", "GPLv3", "MIT", …)
                                  • "logo": URI or path to image, preferably
                                    small logo or icon. .png or .svg format is
                                    preferred.
                    {attributes}  任意の文字列: 非公式のクライアントプロパティ
                                  Map。推奨されるキー。:
                                  • "website": クライアントホームページURL
                                    (Githubリポジトリ等)
                                  • "license": ライセンスの説明 ("Apache2"
                                    "GPLv3", "MIT", …)
                                  • "logo": 画像のURIまたはパス。.pngか.svgの小
                                    さなロゴかアイコンが推奨されます。

nvim_get_chan_info({chan})                              *nvim_get_chan_info()*
                Get information about a channel.
                チャンネルに関する情報を取得します。

                Return: ~
                    Dictionary describing a channel, with these keys:
                    • "stream" the stream underlying the channel
                      • "stdio" stdin and stdout of this Nvim instance
                      • "stderr" stderr of this Nvim instance
                      • "socket" TCP/IP socket or named pipe
                      • "job" job with communication over its stdio

                    • "mode" how data received on the channel is interpreted
                      • "bytes" send and receive raw bytes
                      • "terminal" a |terminal| instance interprets ASCII
                        sequences
                      • "rpc" |RPC| communication on the channel is active

                    • "pty" Name of pseudoterminal, if one is used (optional).
                      On a POSIX system, this will be a device path like
                      /dev/pts/1. Even if the name is unknown, the key will
                      still be present to indicate a pty is used. This is
                      currently the case when using winpty on windows.
                    • "buffer" buffer with connected |terminal| instance
                      (optional)
                    • "client" information about the client on the other end
                      of the RPC channel, if it has added it using
                      |nvim_set_client_info()|. (optional)
                Return: ~
                    これらのキーを持つチャンネルに関する辞書:
                    • "stream" チャンネルの基礎となるストリーム。
                      • "stdio" Nvimインスタンスのstdinとstdout。
                      • "stderr" Nvimインスタンスのstde。
                      • "socket" TCP/IPソケットまたは名前付きパイプ。
                      • "job" stdioを介して通信を伴うjob。

                    • "mode" チャンネルで取得したデータの解釈方法。
                      • "bytes" 生データの送受信。
                      • "terminal" |termina|インスタンスはASCIIシーケンスを解釈
                        する。
                      • "rpc" |RPC|通信がアクティブ。

                    • "pty" 使用されている場合、疑似端末の名前(オプション)。
                      POSIXシステムでは、これは/dev/pts/1のようなデバイスパスに
                      なります。名前がわからない場合でもptyが使われていることを
                      示すキーは存在します。これはWindowsでwinptyを使用したケー
                      スです。
                    • "buffer" 接続された|terminal|インスタンスを持つバッファ。
                      (オプション)
                    • "client" |nvim_set_client_info()|を使用してRPCチャンネル
                      を追加した場合、反対側のクライアントに関する情報
                      (オプション)

nvim_list_chans()                                          *nvim_list_chans()*
                Get information about all open channels.
                開いているすべてのチャンネルに関する情報を取得します。

                Return: ~
                    Array of Dictionaries, each describing a channel with the
                    format specified at |nvim_get_chan_info()|.
                    |nvim_get_chan_info()|で指定された形式でチャンネルを記述す
                    る辞書配列。

nvim_call_atomic({calls})                                 *nvim_call_atomic()*
                Calls many API methods atomically.
                複数のAPIメソッドをアトミックに呼び出します。

                This has two main usages:
                1. To perform several requests from an async context
                   atomically, i.e. without interleaving redraws, RPC requests
                   from other clients, or user interactions (however API
                   methods may trigger autocommands or event processing which
                   have such side-effects, e.g. |:sleep| may wake timers).
                2. To minimize RPC overhead (roundtrips) of a sequence of many
                   requests.
                主に2つの使い方があります:
                1. 非同期コンテキストから複数のリクエストをアトミックに実行しま
                   す。つまり、再描画、他のクライアントからのRPCリクエスト、ユー
                   ザー対話はありません。(しかし、APIメソッドは副作用を持つ
                   autocommandやイベント処理を起動することがあります。例えば、
                   |:sleep|はタイマーを起動することがあります。)
                2. 多くのリクエストのRPCオーバーヘッド(往復)を最小限に抑えるため。

                Parameters: ~
                    {calls}  an array of calls, where each call is described
                             by an array with two elements: the request name,
                             and an array of arguments.
                    {calls}  呼び出す配列。2つの要素を持つ配列で記述される:
                             リクエスト名と引数の配列。

                Return: ~
                    Array of two elements. The first is an array of return
                    values. The second is NIL if all calls succeeded. If a
                    call resulted in an error, it is a three-element array
                    with the zero-based index of the call which resulted in an
                    error, the error type and the error message. If an error
                    occurred, the values from all preceding calls will still
                    be returned.
                    2つの要素を持つ配列。1つ目は戻り値の配列です。2つ目はすべて
                    の呼び出しが成功した場合はNILです。呼び出しがエラーになった
                    場合、エラーが発生した0ベースのインデックス、エラーの種類、
                    エラーメッセージの3つの要素を持つ配列になります。エラーが
                    発生した場合でも、先行するすべての呼び出しから値が返されます。

                                                     *nvim_parse_expression()*
nvim_parse_expression({expr}, {flags}, {highlight})
                Parse a VimL expression.
                VimL式をパースします。

                Attributes: ~
                    {fast}

                Parameters: ~
                    {expr}       Expression to parse. Always treated as a
                                 single line.
                    {expr}       パースする式。常に1行として扱われます。
                    {flags}      Flags:
                                 • "m" if multiple expressions in a row are
                                   allowed (only the first one will be
                                   parsed),
                                 • "E" if EOC tokens are not allowed
                                   (determines whether they will stop parsing
                                   process or be recognized as an
                                   operator/space, though also yielding an
                                   error).
                                 • "l" when needing to start parsing with
                                   lvalues for ":let" or ":for". Common flag
                                   sets:
                                 • "m" to parse like for ":echo".
                                 • "E" to parse like for "<C-r>=".
                                 • empty string for ":call".
                                 • "lm" to parse for ":let".
                    {flags}      フラグ:
                                 • "m" 複数の式を行内で使用できる場合。(最初の
                                   式のみがパースされます。)
                                 • "E" EOCトークンが許可されていない場合。(パー
                                   スを停止するか、エラーも発生しますが演算子/ス
                                   ペースとして認識され るかを決定します)
                                 • "l" ":let"か":for"の左辺値でパースを開始する
                                   必要がある場合。共通のフラグセット:
                                 • "m" ":echo"のようにパースします。
                                 • "E" "<C-r>="のようにパースします。
                                 • ":call"の空の文字列。
                                 • "lm" ":let"のパースをします。
                    {highlight}  If true, return value will also include
                                 "highlight" key containing array of 4-tuples
                                 (arrays) (Integer, Integer, Integer, String),
                                 where first three numbers define the
                                 highlighted region and represent line,
                                 starting column and ending column (latter
                                 exclusive: one should highlight region
                                 [start_col, end_col)).
                    {highlight}  trueの場合、"highlight"キーを含む4要素タプル(配
                                 列)を返します(Integer, Integer, Integer,
                                 String)。最初の3つはハイライトされた領域を定義
                                 し、行、開始列、終了列を表します(後者は排他的:
                                 領域をハイライトする必要があります[start_col,
                                 end_col])。

                Return: ~
                    • AST: top-level dictionary with these keys:
                    • AST: これらのキーを持つトップレベル辞書:
                      • "error": Dictionary with error, present only if parser
                        saw some error. Contains the following keys:
                        • "message": String, error message in printf format,
                          translated. Must contain exactly one "%.*s".
                        • "arg": String, error message argument.
                      • "error": エラーの辞書。パーサーがエラーを検出した場合の
                        み存在します。次のキーが含まれます。:
                        • "message": 文字列。printf形式に変換されたエラーメッセ
                          ージ。"%.*s"を1つだけ含む必要があります。
                        • "arg": 文字列。エラーメッセージ引数。

                      • "len": Amount of bytes successfully parsed. With flags
                        equal to "" that should be equal to the length of expr
                        string. (“Sucessfully parsed” here means “participated
                        in AST creation”, not “till the first error”.)
                      • "len": 正常にパースされたバイト数。フラグが""の場合、
                        expr文字列の長さと等しくなければなりません。
                      • "ast": AST, either nil or a dictionary with these
                        keys:
                      • "ast": AST。nilまたはこれらのキーを持つ辞書:
                        • "type": node type, one of the value names from
                          ExprASTNodeType stringified without "kExprNode"
                          prefix.
                        • "type": ノードタイプ。"kExprNode"接頭辞なしで文字列化
                          されたExprASTNodeTypeの1つ。
                        • "start": a pair [line, column] describing where node
                          is "started" where "line" is always 0 (will not be 0
                          if you will be using nvim_parse_viml() on e.g.
                          ":let", but that is not present yet). Both elements
                          are Integers.
                        • "start": ノードが"start"される場所を説明するペア
                          [line, column] "line"は常に0(たとえば、|:let|で
                          |nvim_parse_viml()|を使用する場合は0になりませんが、ま
                          だ存在しません)。両方の要素は整数です。
                        • "len": “length” of the node. This and "start" are
                          there for debugging purposes primary (debugging
                          parser and providing debug information).
                        • "len": ノードの長さ。これと"start"は主にデバッグ目的
                          で使用されます。(パーサーのデバッグとデバッグ情報の提
                          供)
                        • "children": a list of nodes described in top/"ast".
                          There always is zero, one or two children, key will
                          not be present if node has no children. Maximum
                          number of children may be found in node_maxchildren
                          array.
                        • "children": "ast"で説明されているノードのリスト。常に
                          0,1,2個の子があり、ノードに子がない場合キーは存在しま
                          せん。子の最大数はnode_maxchildren配列にあります。

                    • Local values (present only for certain nodes):
                    • ローカル値(特定のノードにのみ存在)
                      • "scope": a single Integer, specifies scope for
                        "Option" and "PlainIdentifier" nodes. For "Option" it
                        is one of ExprOptScope values, for "PlainIdentifier"
                        it is one of ExprVarScope values.
                      • "scope": 1つの整数。"Option"と"PlainIdentifier"ノードの
                        スコープを指定します。"Option"の場合ExprOptScope値の1つ
                        になり、"PlainIdentifier"の場合ExprVarScope値の1つになり
                        ます。
                      • "ident": identifier (without scope, if any), present
                        for "Option", "PlainIdentifier", "PlainKey" and
                        "Environment" nodes.
                      • "ident":"Option", "PlainIdentifier", "PlainKey",
                        "Environment"ノードに存在する識別子(スコープがない場合)。
                      • "name": Integer, register name (one character) or -1.
                        Only present for "Register" nodes.
                      • "name":整数。レジスタ名(1文字)または-1。"Register"ノー
                        ドにのみ存在します。
                      • "cmp_type": String, comparison type, one of the value
                        names from ExprComparisonType, stringified without
                        "kExprCmp" prefix. Only present for "Comparison"
                        nodes.
                      • "cmp_type":文字列。比較タイプ、ExprComparisonTypeの値名
                        の1つ。"kExprCmp"接頭辞なしで文字列化されています。
                        "Comparison"ノードにのみ存在します。
                      • "ccs_strategy": String, case comparison strategy, one
                        of the value names from ExprCaseCompareStrategy,
                        stringified without "kCCStrategy" prefix. Only present
                        for "Comparison" nodes.
                      • "ccs_strategy": 文字列。ケース比較方法。
                        ExprCaseCompareStrategy値名の1つ。"kExprCmp"接頭辞なしで
                        文字列化されています。
                      • "augmentation": String, augmentation type for
                        "Assignment" nodes. Is either an empty string, "Add",
                        "Subtract" or "Concat" for "=", "+=", "-=" or ".="
                        respectively.
                      • "augmentation": 文字列。"Assignment"ノードの拡張タイプ。
                        空の文字列, "=", "+=", "-=", ".="のずれかです。
                      • "invert": Boolean, true if result of comparison needs
                        to be inverted. Only present for "Comparison" nodes.
                      • "invert": 真偽値。比較結果を反転する必要がある場合は
                        true。"Comparison"ノードにのみ存在します。
                      • "ivalue": Integer, integer value for "Integer" nodes.
                      • "ivalue": 整数。"Integer"ノードの整数値。
                      • "fvalue": Float, floating-point value for "Float"
                        nodes.
                      • "fvalue": 実数。"Float"ノードの浮動小数点値。
                      • "svalue": String, value for "SingleQuotedString" and
                        "DoubleQuotedString" nodes.
                      • "svalue":文字列。"SingleQuotedString"と
                        "DoubleQuotedString"ノードの値。

nvim__id({obj})                                                   *nvim__id()*
                Returns object given as argument.
                引数で与えられたオブジェクトを返します。

                This API function is used for testing. One should not rely on
                its presence in plugins.
                このAPI関数はテストに使用されます。プラグインでの存在に依存すべ
                き ではありません。

                Parameters: ~
                    {obj}  Object to return.
                    {obj}  返すオブジェクト。

                Return: ~
                    its argument.
                    引数。

nvim__id_array({arr})                                       *nvim__id_array()*
                Returns array given as argument.
                引数で与えられた配列を返します。

                This API function is used for testing. One should not rely on
                its presence in plugins.
                このAPI関数はテストに使用されます。プラグインでの存在に依存すべ
                き ではありません。

                Parameters: ~
                    {arr}  Array to return.
                    {arr}  返す配列。

                Return: ~
                    its argument.
                    引数。

nvim__id_dictionary({dct})                             *nvim__id_dictionary()*
                Returns dictionary given as argument.
                引数で与えられた辞書を返します。

                This API function is used for testing. One should not rely on
                its presence in plugins.
                このAPI関数はテストに使用されます。プラグインでの存在に依存すべ
                き ではありません。

                Parameters: ~
                    {dct}  Dictionary to return.
                    {dct}  返す辞書。

                Return: ~
                    its argument.
                    引数。

nvim__id_float({flt})                                       *nvim__id_float()*
                Returns floating-point value given as argument.
                引数で与えられた実数を返します。

                This API function is used for testing. One should not rely on
                its presence in plugins.
                このAPI関数はテストに使用されます。プラグインでの存在に依存すべ
                き ではありません。

                Parameters: ~
                    {flt}  Value to return.
                    {flt}  返す値。

                Return: ~
                    its argument.
                    引数。

nvim__stats()                                                  *nvim__stats()*
                Gets internal stats.
                内部統計を取得します。

                Return: ~
                    Map of various internal stats.
                    内部統計Map。

nvim_list_uis()                                              *nvim_list_uis()*
                Gets a list of dictionaries representing attached UIs.
                接続されたUIを表す辞書のリストを取得します。

                Return: ~
                    Array of UI dictionaries, each with these keys:
                    UI辞書の配列。それぞれがこれらのキーを持ちます。:
                    • "height" Requested height of the UI
                    • "height" 要求されたUIの高さ。
                    • "width" Requested width of the UI
                    • "width" 要求されたUIの幅。
                    • "rgb" true if the UI uses RGB colors (false implies
                      |cterm-colors|)
                    • "rgb" UIがRGBカラーを使用する場合はtrue。(falseは|cterm-colors|
                      を意味します。)
                    • "ext_..." Requested UI extensions, see |ui-option|
                    • "ext_..." 要求されたUI拡張。|ui-option|を参照。
                    • "chan" Channel id of remote UI (not present for TUI)
                    • "chan" リモートUIのチャンネルid。(TUIには存在しません)

nvim_get_proc_children({pid})                       *nvim_get_proc_children()*
                Gets the immediate children of process `pid` .
                プロセス`pid`の直接の子プロセスを取得します。

                Return: ~
                    Array of child process ids, empty if process not found.
                    子プロセスのidの配列。プロセスが見つからなければ空。

nvim_get_proc({pid})                                         *nvim_get_proc()*
                Gets info describing process `pid` .
                プロセス`pid`に関する情報を取得します。

                Return: ~
                    Map of process properties, or NIL if process not found.
                    プロセスのプロパティMap。プロセスが見つからなければNIL。

                                                *nvim_select_popupmenu_item()*
nvim_select_popupmenu_item({item}, {insert}, {finish}, {opts})
                Selects an item in the completion popupmenu.
                補完ポップアップメニューで項目を選択します。

                If |ins-completion| is not active this API call is silently
                ignored. Useful for an external UI using |ui-popupmenu| to
                control the popupmenu with the mouse. Can also be used in a
                mapping; use <cmd> |:map-cmd| to ensure the mapping doesn't
                end completion mode.
                |ins-completion|が無効の場合、このAPIコールは静かに無視されます。
                |ui-popupmenu|を使用してマウスでポップアップメニューを制御する外
                部UIに便利です。マッピングでも使用できます。<cmd> |:map-cmd|を使
                用してマッピングが補完モードを終了しないようにします。

                Parameters: ~
                    {item}    Index (zero-based) of the item to select. Value
                              of -1 selects nothing and restores the original
                              text.
                    {item}    選択する項目のインデックス(0ベース)。-1なら何も選
                              択せず、元のテキストを復元します。
                    {insert}  Whether the selection should be inserted in the
                              buffer.
                    {insert}  選択範囲をバッファに挿入するかどうか。
                    {finish}  Finish the completion and dismiss the popupmenu.
                              Implies `insert` .
                    {finish}  補完を完了してポップアップメニューを閉じます。
                              `insert`を意味します。
                    {opts}    Optional parameters. Reserved for future use.
                    {opts}    オプションのパラメーター。将来のために予約済みです。

nvim__inspect_cell({grid}, {row}, {col})                *nvim__inspect_cell()*
                TODO: Documentation


==============================================================================
Buffer Functions                                                  *api-buffer*

Unloaded Buffers:~

Buffers may be unloaded by the |:bunload| command or the
buffer's |'bufhidden'| option. When a buffer is unloaded its
file contents are freed from memory and vim cannot operate on
the buffer lines until it is reloaded (usually by opening the
buffer again in a new window). API methods such as
|nvim_buf_get_lines()| and |nvim_buf_line_count()| will be
affected.
バッファは|:bunload|または、|'bufhidden'|によってアンロードできます。
バッファがアンロードされると、ファイルの内容はメモリから開放され、リロードされる
(通常、新しいウィンドウで再度開く)までバッファを操作できません。
|nvim_buf_get_lines()|や|nvim_buf_line_count()|などのAPIメソッドが影響を受けます。

You can use |nvim_buf_is_loaded()| or |nvim_buf_line_count()|
to check whether a buffer is loaded.
|nvim_buf_is_loaded()|または|nvim_buf_line_count()|を使用してバッファがロードさ
れているかどうかを確認できます。

nvim_buf_line_count({buffer})                          *nvim_buf_line_count()*
                Gets the buffer line count
                バッファの行数を取得します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファの場合は0。

                Return: ~
                    Line count, or 0 for unloaded buffer. |api-buffer|
                    行数。アンロードされたバッファの場合は0。|api-buffer|

nvim_buf_attach({buffer}, {send_buffer}, {opts})           *nvim_buf_attach()*
                Activates buffer-update events on a channel, or as Lua
                callbacks.

                Example (Lua): capture buffer updates in a global `events` variable (use "print(vim.inspect(events))" to see its
                contents): >
                  events = {}
                  vim.api.nvim_buf_attach(0, false, {
                    on_lines=function(...) table.insert(events, {...}) end})
<

                Parameters: ~
                    {buffer}       Buffer handle, or 0 for current buffer
                    {send_buffer}  True if the initial notification should
                                   contain the whole buffer: first
                                   notification will be `nvim_buf_lines_event`
                                   . Else the first notification will be
                                   `nvim_buf_changedtick_event` . Not for Lua
                                   callbacks.
                    {opts}         Optional parameters.
                                   • on_lines: Lua callback invoked on change.
                                     Return `true` to detach. Args:
                                     • buffer handle
                                     • b:changedtick
                                     • first line that changed (zero-indexed)
                                     • last line that was changed
                                     • last line in the updated range
                                     • byte count of previous contents
                                     • deleted_codepoints (if `utf_sizes` is
                                       true)
                                     • deleted_codeunits (if `utf_sizes` is
                                       true)

                                   • on_changedtick: Lua callback invoked on
                                     changedtick increment without text
                                     change. Args:
                                     • buffer handle
                                     • b:changedtick

                                   • on_detach: Lua callback invoked on
                                     detach. Args:
                                     • buffer handle

                                   • utf_sizes: include UTF-32 and UTF-16 size
                                     of the replaced region, as args to
                                     `on_lines` .

                Return: ~
                    False if attach failed (invalid parameter, or buffer isn't
                    loaded); otherwise True. TODO: LUA_API_NO_EVAL

                See also: ~
                    |nvim_buf_detach()|
                    |api-buffer-updates-lua|

nvim_buf_detach({buffer})                                  *nvim_buf_detach()*
                Deactivates buffer-update events on the channel.

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer

                Return: ~
                    False if detach failed (because the buffer isn't loaded);
                    otherwise True.

                See also: ~
                    |nvim_buf_attach()|
                    |api-lua-detach| for detaching Lua callbacks

                                                        *nvim_buf_get_lines()*
nvim_buf_get_lines({buffer}, {start}, {end}, {strict_indexing})
                Gets a line-range from the buffer.
                バッファから行範囲を取得します。

                Indexing is zero-based, end-exclusive. Negative indices are
                interpreted as length+1+index: -1 refers to the index past the
                end. So to get the last element use start=-2 and end=-1.
                0ベースのインデックスで最後は排他的です。負のインデックスは
                長さ+1+インデックスとして解釈されます。-1は末尾を越えたインデッ
                クスを表します。したがって、最後の要素を取得するにはstart=-2,
                end=-1を使用します。

                Out-of-bounds indices are clamped to the nearest valid value,
                unless `strict_indexing` is set.
                範囲外のインデックスは`strict_indexing`が指定されていない限り、
                最も近い有効な値に固定されます。

                Parameters: ~
                    {buffer}           Buffer handle, or 0 for current buffer
                    {buffer}           バッファハンドル。カレントバッファの場合
                                       は0。
                    {start}            First line index
                    {start}            最初の行のインデックス。
                    {end}              Last line index (exclusive)
                    {end}              最後の行のインデックス。(排他的)
                    {strict_indexing}  Whether out-of-bounds should be an
                                       error.
                    {strict_indexing}  範囲外をエラーにするかどうか。

                Return: ~
                    Array of lines, or empty array for unloaded buffer.
                    行の配列。アンロードされたバッファの場合は空の配列。

                                                        *nvim_buf_set_lines()*
nvim_buf_set_lines({buffer}, {start}, {end}, {strict_indexing},
                   {replacement})
                Sets (replaces) a line-range in the buffer.
                バッファに範囲行をセット（置換）します。

                Indexing is zero-based, end-exclusive. Negative indices are
                interpreted as length+1+index: -1 refers to the index past the
                end. So to change or delete the last element use start=-2 and
                end=-1.
                インデックスは0ベースで、終端を含まない。負のインデックスは、
                長さ+1+インデックスとして解釈されます。-1は末尾を越えたインデッ
                クスを表します。したがって、最後の要素を取得するにはstart=-2,
                end=-1を使用します。

                To insert lines at a given index, set `start` and `end` to the
                same index. To delete a range of lines, set `replacement` to
                an empty array.
                与えられたインデックスに行を挿入するために、同じインデックスに
                始点と終点をセットします。範囲行を削除するためには、空の配列に
                置換します。

                Out-of-bounds indices are clamped to the nearest valid value,
                unless `strict_indexing` is set.
                範囲外のインデックスは`strict_indexing`が指定されていない限り、
                最も近い有効な値に固定されます。

                Parameters: ~
                    {buffer}           Buffer handle, or 0 for current buffer
                                       バッファハンドルまたは現在のバッファの場合は0。
                    {start}            First line index
                                       最初の行のインデック
                    {end}              Last line index (exclusive)
                                       最終行のインデックス（排他的）
                    {strict_indexing}  Whether out-of-bounds should be an
                                       error.
                                       インデックス範囲外をエラーにすべきか
                                       どうかの判定
                    {replacement}      Array of lines to use as replacement
                                       置換として利用するための文字行の配列

nvim_buf_get_offset({buffer}, {index})                 *nvim_buf_get_offset()*
                Returns the byte offset of a line (0-indexed). |api-indexing|
		行のバイトオフセットを返却します（0から始まるインデックス）
		|api-indexing|を参照

                Line 1 (index=0) has offset 0. UTF-8 bytes are counted. EOL is
                one byte. 'fileformat' and 'fileencoding' are ignored. The
                line index just after the last line gives the total byte-count
                of the buffer. A final EOL byte is counted if it would be
                written, see 'eol'.
		1行目（index=0）は、オフセット0です。UTF-8のバイトはカウントされ
		ます。EOLは1バイトです。
		'fileformat'と'fileencoding'は無視されます。
		行のインデックスは、最終行の直後までのバッファの合計バイト数を
		与えます。最後のEOLバイトは、EOLが書き込まれていればカウント
		されます。'eol'を参照。

                Unlike |line2byte()|, throws error for out-of-bounds indexing.
                Returns -1 for unloaded buffer.
                |line2byte()|と異なり、インデックス範囲外の例外を投げます。
                読み込まれていないバッファに-1を返却します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドルまたは現在のバッファの場合は0。
                    {index}   Line index
                              行インデックス

                Return: ~
                    Integer byte offset, or -1 for unloaded buffer.
                    整数値のバイトオフセットまたは、ロードされてないバッファの
                    場合は-1を返却します

nvim_buf_get_var({buffer}, {name})                        *nvim_buf_get_var()*
                Gets a buffer-scoped (b:) variable.
                バッファローカルな変数を取得します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドルまたは現在のバッファの場合は0。
                    {name}    Variable name
                              変数名

                Return: ~
                    Variable value
                    変数名

nvim_buf_get_changedtick({buffer})                *nvim_buf_get_changedtick()*
                Gets a changed tick of a buffer
                バッファの変更タイミングを取得します。


                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドルまたは現在のバッファの場合は0。

                Return: ~
                    `b:changedtick` value.
                    `b:changedtick`の値


nvim_buf_get_keymap({buffer}, {mode})                  *nvim_buf_get_keymap()*
                Gets a list of buffer-local |mapping| definitions.
                バッファローカルなマッピングを取得します。

                Parameters: ~
                    {mode}    Mode short-name ("n", "i", "v", ...)
                              モードの短縮名 ("n", "i", "v", ...)
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドルまたは現在のバッファの場合は0。

                Return: ~
                    Array of maparg()-like dictionaries describing mappings.
                    The "buffer" key holds the associated buffer handle.
                    マッピングについて記述した、maparg()-likeの辞書配列。
                    バッファキーは、バッファハンドルと連携したものを保持します。

                                                       *nvim_buf_set_keymap()*
nvim_buf_set_keymap({buffer}, {mode}, {lhs}, {rhs}, {opts})
                Sets a buffer-local |mapping| for the given mode.
                与えられたモードに対して、バッファローカルなマッピングを設定します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドル。カレントバッファは0。

                See also: ~
                    |nvim_set_keymap()|

nvim_buf_del_keymap({buffer}, {mode}, {lhs})           *nvim_buf_del_keymap()*
                Unmaps a buffer-local |mapping| for the given mode.
                与えられたモードに対して、バッファローカルなマッピングを解除します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドル。カレントバッファは0。

                See also: ~
                    |nvim_del_keymap()|

nvim_buf_get_commands({buffer}, {opts})              *nvim_buf_get_commands()*
                Gets a map of buffer-local |user-commands|.
                バッファローカルなユーザコマンドのマッピングを取得します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                              バッファハンドル。カレントバッファは0。
                    {opts}    Optional parameters. Currently not used.
                              オプションのパラメータ。現在は使われていない。

                Return: ~
                    Map of maps describing commands.
                    コマンドについて記述されたマッピング

nvim_buf_set_var({buffer}, {name}, {value})               *nvim_buf_set_var()*
 nvimdoc               Sets a buffer-scoped (b:) variable
                バッファ変数(b:)をセットします。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Variable name
                    {name}    変数名。
                    {value}   Variable value
                    {value}   変数の値。

nvim_buf_del_var({buffer}, {name})                        *nvim_buf_del_var()*
                Removes a buffer-scoped (b:) variable
                バッファ変数(b:)を削除します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Variable name
                    {name}    変数名。

nvim_buf_get_option({buffer}, {name})                  *nvim_buf_get_option()*
                Gets a buffer option value
                バッファオプションの値を取得します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Option name
                    {name}    オプション名。

                Return: ~
                    Option value
                    オプションの値。

nvim_buf_set_option({buffer}, {name}, {value})         *nvim_buf_set_option()*
                Sets a buffer option value. Passing 'nil' as value deletes the
                option (only works if there's a global fallback)
                バッファオプションをセットします。値として'nil'を渡すとオプショ
                ンが削除されます(グローバルフォールバッグがある場合にのみ)。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Option name
                    {name}    オプション名。
                    {value}   Option value
                    {value}   オプションの値。

nvim_buf_get_name({buffer})                              *nvim_buf_get_name()*
                Gets the full file name for the buffer
                バッファのフルパスを取得します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。

                Return: ~
                    Buffer name
                    バッファ名。

nvim_buf_set_name({buffer}, {name})                      *nvim_buf_set_name()*
                Sets the full file name for a buffer
                バッファのフルパスをセットします。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Buffer name
                    {name}    バッファ名。

nvim_buf_is_loaded({buffer})                            *nvim_buf_is_loaded()*
                Checks if a buffer is valid and loaded. See |api-buffer| for
                more info about unloaded buffers.
                バッファが有効でロードされているかチェックします。アンロードされ
                たバッファについては|api-buffer|を参照してください。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。

                Return: ~
                    true if the buffer is valid and loaded, false otherwise.
                    バッファが有効でロードされている場合はtrue。それ以外はfalse。

nvim_buf_is_valid({buffer})                              *nvim_buf_is_valid()*
                Checks if a buffer is valid.
                バッファが有効かどうかチェックします。

                Note:
                    Even if a buffer is valid it may have been unloaded. See
                    |api-buffer| for more info about unloaded buffers.
                    バッファが有効であってもアンロードされているかもしれません。
                    アンロードされたバッファについては|api-buffer|を参照してくだ
                    さい。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。

                Return: ~
                    true if the buffer is valid, false otherwise.
                    バッファが有効の場合はtrue。それ以外はfalse。

nvim_buf_get_mark({buffer}, {name})                      *nvim_buf_get_mark()*
                Return a tuple (row,col) representing the position of the
                named mark.
                マーク位置のタプル(row,col)を返します。

                Marks are (1,0)-indexed. |api-indexing|
                マークは(1,0)から始まります。|api-indexing|

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {name}    Mark name
                    {name}    マーク名。

                Return: ~
                    (row, col) tuple
                    (row, col) タプル。

                                                *nvim_buf_get_extmark_by_id()*
nvim_buf_get_extmark_by_id({buffer}, {ns_id}, {id})
                Returns position for a given extmark id
                与えられたextmark idの位置を返します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {ns_id}   Namespace id from |nvim_create_namespace()|
                    {ns_id}   |nvim_create_namespace()|のネームスペースid。
                    {id}      Extmark id

                Return: ~
                    (row, col) tuple or empty list () if extmark id was absent
                    (row, col) タプル。extmark idがない場合は空のリスト()。

                                                     *nvim_buf_get_extmarks()*
nvim_buf_get_extmarks({buffer}, {ns_id}, {start}, {end}, {opts})
                Gets extmarks in "traversal order" from a |charwise| region
                defined by buffer positions (inclusive, 0-indexed
                |api-indexing|).
                バッファ位置(内包的、0インデックス |api-indexing|)で定義された
                |charwise|領域から"走査順"でextmarkを取得します。

                Region can be given as (row,col) tuples, or valid extmark ids
                (whose positions define the bounds). 0 and -1 are understood
                as (0,0) and (-1,-1) respectively, thus the following are
                equivalent:
                領域は(row,col)タプル、または有効なextmark id(境界を定義する位置)
                として指定できます。0と-1はそれぞれ(0,0)と(-1,-1)として解釈され
                るため以下は同等です。:
>
                  nvim_buf_get_extmarks(0, my_ns, 0, -1, {})
                  nvim_buf_get_extmarks(0, my_ns, [0,0], [-1,-1], {})
<

                If `end` is less than `start` , traversal works backwards.
                (Useful with `limit` , to get the first marks prior to a given
                position.)
                `end`が`start`より小さい場合、逆方向に走査します。(指定された
                位置の前の最初のマークを取得するために`limit`とともに使用すると
                便利です。)

                Example:
                例:
>
                  local a   = vim.api
                  local pos = a.nvim_win_get_cursor(0)
                  local ns  = a.nvim_create_namespace('my-plugin')
                  -- Create new extmark at line 1, column 1.
                  -- 行1、列1に新しいextmarkを作成します。
                  local m1  = a.nvim_buf_set_extmark(0, ns, 0, 0, 0, {})
                  -- Create new extmark at line 3, column 1.
                  -- 行3、列1に新しいextmarkを作成します。
                  local m2  = a.nvim_buf_set_extmark(0, ns, 0, 2, 0, {})
                  -- Get extmarks only from line 3.
                  -- 3行目からのみextmarkを取得します。
                  local ms  = a.nvim_buf_get_extmarks(0, ns, {2,0}, {2,0}, {})
                  -- Get all marks in this buffer + namespace.
                  -- バッファ+ネームスペース内の全てのマークを取得します。
                  local all = a.nvim_buf_get_extmarks(0, ns, 0, -1, {})
                  print(vim.inspect(ms))
<

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {ns_id}   Namespace id from |nvim_create_namespace()|
                    {ns_id}   |nvim_create_namespace()|のネームスペースid。
                    {start}   Start of range, given as (row, col) or valid
                              extmark id (whose position defines the bound)
                    {start}   範囲の始まり。(row,col)または有効なextmark id(境界
                              を定義する位置)
                    {end}     End of range, given as (row, col) or valid
                              extmark id (whose position defines the bound)
                    {end}     範囲の終り。 (row,col)または有効なextmark id(境界
                              を定義する位置)
                    {opts}    Optional parameters. Keys:
                              • limit: Maximum number of marks to return
                    {opts}    オプションのパラメータ。キー:
                              • limit:返すマークの最大数。

                Return: ~
                    List of [extmark_id, row, col] tuples in "traversal
                    order".
                    [extmark_id, row, col]タプルの"走査順"のリスト。

                                                      *nvim_buf_set_extmark()*
nvim_buf_set_extmark({buffer}, {ns_id}, {id}, {line}, {col}, {opts})
                Creates or updates an extmark.
                extmarkを作成または更新します。

                To create a new extmark, pass id=0. The extmark id will be
                returned. It is also allowed to create a new mark by passing
                in a previously unused id, but the caller must then keep track
                of existing and unused ids itself. (Useful over RPC, to avoid
                waiting for the return value.)
                新しいextmarkを作成するにはid=0を渡します。extmark idが返されま
                す。以前に使用されていないidを渡すことで新しいマークを作成するこ
                ともできますが、呼び出し元は既存のidと未使用のidを追跡する必要が
                あります。(戻り値を待たないようにするためRPC上で便利です。)

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {ns_id}   Namespace id from |nvim_create_namespace()|
                    {ns_id}   |nvim_create_namespace()|のネームスペースid。
                    {id}      Extmark id, or 0 to create new
                    {id}      Extmark id。新規作成する場合は0。
                    {line}    Line number where to place the mark
                    {line}    マークを配置する行番号。
                    {col}     Column where to place the mark
                    {col}     マークを配置する列番号。
                    {opts}    Optional parameters. Currently not used.
                    {opts}    オプションパラメーター。現在は未使用。

                Return: ~
                    Id of the created/updated extmark
                    作成/更新されたextmarkのid。

nvim_buf_del_extmark({buffer}, {ns_id}, {id})         *nvim_buf_del_extmark()*
                Removes an extmark.
                extmarkを削除します。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {ns_id}   Namespace id from |nvim_create_namespace()|
                    {ns_id}   |nvim_create_namespace()|のネームスペースid。
                    {id}      Extmark id

                Return: ~
                    true if the extmark was found, else false
                    extmarkが見つかった場合はtrue。それ以外はfalse。

                                                    *nvim_buf_add_highlight()*
nvim_buf_add_highlight({buffer}, {ns_id}, {hl_group}, {line},
                       {col_start}, {col_end})
                Adds a highlight to buffer.
                バッファにハイライトを追加します。

                Useful for plugins that dynamically generate highlights to a
                buffer (like a semantic highlighter or linter). The function
                adds a single highlight to a buffer. Unlike |matchaddpos()|
                highlights follow changes to line numbering (as lines are
                inserted/removed above the highlighted line), like signs and
                marks do.
                バッファにハイライトを動的に生成するプラグイン(セマンティックハ
                イライターやリンター)に役立ちます。この関数は単一のハイライトを
                バッファに追加します。|matchaddpos()|とは異なり、サインやマーク
                の同様に行番号(ハイライトされた行の上で行が挿入/削除されたとき)
                の変更に従います。

                Namespaces are used for batch deletion/updating of a set of
                highlights. To create a namespace, use |nvim_create_namespace|
                which returns a namespace id. Pass it in to this function as
                `ns_id` to add highlights to the namespace. All highlights in
                the same namespace can then be cleared with single call to
                |nvim_buf_clear_namespace|. If the highlight never will be
                deleted by an API call, pass `ns_id = -1` .
                ネームスペースは一連のハイライトを削除/更新に使用されます。ネー
                ムスペースを作成するにはネームスペースidを返す
                |nvim_create_namespace()|を使用します。この関数に`ns_id`として渡
                してネームスペースにハイライトを追加します。同じネームスペースの
                すべてのハイライトは|nvim_buf_clear_namespace()|を1回呼び出すだ
                けでクリアできます。ハイライトがAPI呼び出しで削除されない場合は、
                `ns_id = -1`を渡します。

                As a shorthand, `ns_id = 0` can be used to create a new
                namespace for the highlight, the allocated id is then
                returned. If `hl_group` is the empty string no highlight is
                added, but a new `ns_id` is still returned. This is supported
                for backwards compatibility, new code should use
                |nvim_create_namespace| to create a new empty namespace.
                省略形として、`ns_id = 0`を使用して新しいネームスペースを作成
                でき、割り当てられたidが返されます。`hi_group`が空の場合、ハイラ
                イトは追加されませんが、新しい`ns_id`が返されます。これは後方互
                換性のためにサポートされています。新しいコードでは
                |nvim_create_namespace()|を使用して新しい空のネームスペースを作
                成する必要があります。

                Parameters: ~
                    {buffer}     Buffer handle, or 0 for current buffer
                    {buffer}     バッファハンドル。カレントバッファは0。
                    {ns_id}      namespace to use or -1 for ungrouped
                                 highlight
                    {ns_id}      使用するネームスペース。グループ化されていない
                                 場合は-1。
                    {hl_group}   Name of the highlight group to use
                    {hl_group}   使用するハイライトグループ名。
                    {line}       Line to highlight (zero-indexed)
                    {line}       ハイライトする行(0インデックス)。
                    {col_start}  Start of (byte-indexed) column range to
                                 highlight
                    {col_start}  ハイライトする列範囲の始まり(バイトインデックス)。
                    {col_end}    End of (byte-indexed) column range to
                                 highlight, or -1 to highlight to end of line
                    {col_end}    ハイライトする列範囲の終り。行末までの場合は-1。

                Return: ~
                    The ns_id that was used
                    使用されたns_id。

                                                  *nvim_buf_clear_namespace()*
nvim_buf_clear_namespace({buffer}, {ns_id}, {line_start}, {line_end})
                Clears namespaced objects (highlights, extmarks, virtual text)
                from a region.
                リージョンから、名前空間内のオブジェクト（highlights, extmarks,
                virtual text）をクリアします。

                Lines are 0-indexed. |api-indexing| To clear the namespace in
                the entire buffer, specify line_start=0 and line_end=-1.
                行は0インデックスです。|api-indexing| バッファ全体の名前空間を
                クリアするために、line_startパラメータを0、line_endパラメータを
                -1とします。

                Parameters: ~
                    {buffer}      Buffer handle, or 0 for current buffer
                                  バッファハンドルまたは現在のバッファの場合は0
                    {ns_id}       Namespace to clear, or -1 to clear all
                                  namespaces.
                                  クリアする名前空間または、すべてクリアするときは-1
                    {line_start}  Start of range of lines to clear
                                  クリアする行範囲の先頭
                 --- nekowasabi WIP
                    {line_end}    End of range of lines to clear (exclusive)
                                  or -1 to clear to end of buffer.

                                                 *nvim_buf_set_virtual_text()*
nvim_buf_set_virtual_text({buffer}, {ns_id}, {line}, {chunks}, {opts})
                Set the virtual text (annotation) for a buffer line.
                バッファ行のvirtual text(アノテーション)をセットします。

                By default (and currently the only option) the text will be
                placed after the buffer text. Virtual text will never cause
                reflow, rather virtual text will be truncated at the end of
                the screen line. The virtual text will begin one cell
                (|lcs-eol| or space) after the ordinary text.
                デフォルト(現在では唯一のオプション)では、テキストはバッファテキ
                ストの後に配置されます。virtual textはリフローを起さず、画面の行
                末で切り捨てられます。virtual textは通常のテキストの後のセル(
                |lcs-eol|またはスペース)から始まります。

                Namespaces are used to support batch deletion/updating of
                virtual text. To create a namespace, use
                |nvim_create_namespace|. Virtual text is cleared using
                |nvim_buf_clear_namespace|. The same `ns_id` can be used for
                both virtual text and highlights added by
                |nvim_buf_add_highlight|, both can then be cleared with a
                single call to |nvim_buf_clear_namespace|. If the virtual text
                never will be cleared by an API call, pass `ns_id = -1` .
                ネームスペースはvirtual textを一括で削除/更新するために使用され
                ます。ネームスペースを作成するには|nvim_create_namespace()|を使
                用します。virtual textは|nvim_buf_clear_namespace()|を使用してク
                リアされます。virtual textと|nvim_buf_add_highlight()|によって追
                加されたハイライトは同じ`ns_id`を使用でき、両方を1回の
                |nvim_buf_clear_namespace()|呼び出しでクリアできます。
                virtual textがAPI呼び出しで削除されない場合は、`ns_id = -1`を渡
                します。

                As a shorthand, `ns_id = 0` can be used to create a new
                namespace for the virtual text, the allocated id is then
                returned.
                省略形として、`ns_id = 0`を使用して新しいネームスペースを作成
                でき、割り当てられたidが返されます。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {ns_id}   Namespace to use or 0 to create a namespace, or
                              -1 for a ungrouped annotation
                    {ns_id}   使用するネームスペース。ネームスペースを作成する場
                              合は0。グループ化されていない場合は-1。
                    {line}    Line to annotate with virtual text
                              (zero-indexed)
                    {line}    virtual textでアノテーションをつける行(0インデック
                              ス)
                    {chunks}  A list of [text, hl_group] arrays, each
                              representing a text chunk with specified
                              highlight. `hl_group` element can be omitted for
                              no highlight.
                    {chunks}  配列[text, hi_group]のリスト。それぞれ指定されたハ
                              イライト付きのテキストチャンクを表します。
                              `hi_group`要素はハイライトしない場合省略できます。
                    {opts}    Optional parameters. Currently not used.
                    {opts}    オプションパラメーター。現在は未使用。

                Return: ~
                    The ns_id that was used
                    使用されたns_id。

nvim_buf_get_virtual_text({buffer}, {lnum})      *nvim_buf_get_virtual_text()*
                Get the virtual text (annotation) for a buffer line.
                バッファ行のvirtual text(アノテーション)を取得します。

                The virtual text is returned as list of lists, whereas the
                inner lists have either one or two elements. The first element
                is the actual text, the optional second element is the
                highlight group.
                virtual textはリストのリストとして返されますが内部のリストには1
                つまたは2つの要素があります。1つ目の要素は実際のテキストで、2つ
                目の要素はハイライトグループです。

                The format is exactly the same as given to
                nvim_buf_set_virtual_text().
                フォーマットは|nvim_set_virtual_text()|に指定されたものと同じで
                す。

                If there is no virtual text associated with the given line, an
                empty list is returned.
                指定された行にvirtual textがない場合、空のリストが返されます。

                Parameters: ~
                    {buffer}  Buffer handle, or 0 for current buffer
                    {buffer}  バッファハンドル。カレントバッファは0。
                    {line}    Line to get the virtual text from (zero-indexed)
                    {line}    virtual textを取得する行(0インデックス)。

                Return: ~
                    List of virtual text chunks
                    virtual textチャンクのリスト。

nvim__buf_stats({buffer})                                  *nvim__buf_stats()*
                TODO: Documentation


==============================================================================
Window Functions                                                  *api-window*

nvim_win_get_buf({window})                                *nvim_win_get_buf()*
                Gets the current buffer in a window
                ウィンドウ内のカレントバッファを取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    Buffer handle
                    バッファハンドル。

nvim_win_set_buf({window}, {buffer})                      *nvim_win_set_buf()*
                Sets the current buffer in a window, without side-effects
                副作用なしで、ウィンドウのカレントバッファをセットします。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {buffer}  Buffer handle
                    {buffer}  バッファハンドル。

nvim_win_get_cursor({window})                          *nvim_win_get_cursor()*
                Gets the (1,0)-indexed cursor position in the window.
                |api-indexing|
                ウィンドウの(1,0)インデックスなカーソル位置を取得します。
                |api-indexing|

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    (row, col) tuple
                    (row, col)タプル。

nvim_win_set_cursor({window}, {pos})                   *nvim_win_set_cursor()*
                Sets the (1,0)-indexed cursor position in the window.
                |api-indexing|
                ウィンドウの(1,0)インデックスなカーソル位置をセットします。
                |api-indexing|

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {pos}     (row, col) tuple representing the new position
                    {pos}     新しい位置を表す(row, col)タプル。

nvim_win_get_height({window})                          *nvim_win_get_height()*
                Gets the window height
                ウィンドウの高さを取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    Height as a count of rows
                    行数としての高さ。

nvim_win_set_height({window}, {height})                *nvim_win_set_height()*
                Sets the window height. This will only succeed if the screen
                is split horizontally.
                ウィンドウの高さを設定します。画面が水平分割されている場合にのみ
                成功します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {height}  Height as a count of rows
                    {height}  行数としての高さ。

nvim_win_get_width({window})                            *nvim_win_get_width()*
                Gets the window width
                ウィンドウ幅を取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    Width as a count of columns
                    列数としての幅。

nvim_win_set_width({window}, {width})                   *nvim_win_set_width()*
                Sets the window width. This will only succeed if the screen is
                split vertically.
                ウィンドウ幅を設定します。画面が垂直分割されている場合にのみ成功
                します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {width}   Width as a count of columns
                    {width}   列数としての幅。

nvim_win_get_var({window}, {name})                        *nvim_win_get_var()*
                Gets a window-scoped (w:) variable
                ウィンドウローカル(w:)な変数を取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {name}    Variable name
                    {name}    変数名。

                Return: ~
                    Variable value
                    変数の値。

nvim_win_set_var({window}, {name}, {value})               *nvim_win_set_var()*
                Sets a window-scoped (w:) variable
                ウィンドウローカル(w:)な変数をセットします。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {name}    Variable name
                    {name}    変数名。
                    {value}   Variable value
                    {value}   変数の値。

nvim_win_del_var({window}, {name})                        *nvim_win_del_var()*
                Removes a window-scoped (w:) variable
                ウィンドウローカル(w:)な変数を削除します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {name}    Variable name
                    {name}    変数名。

nvim_win_get_option({window}, {name})                  *nvim_win_get_option()*
                Gets a window option value
                ウィンドウオプションの値を取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {name}    Option name
                    {name}    オプション名。

                Return: ~
                    Option value
                    オプションの値。

nvim_win_set_option({window}, {name}, {value})         *nvim_win_set_option()*
                Sets a window option value. Passing 'nil' as value deletes the
                option(only works if there's a global fallback)
                ウィンドウオプションをセットします。'nil'が値として渡されるとオ
                プションが削除されます。(グローバルフォールバックがある場合のみ)

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。
                    {name}    Option name
                    {name}    オプション名。
                    {value}   Option value
                    {value}   オプションの値。

nvim_win_get_position({window})                      *nvim_win_get_position()*
                Gets the window position in display cells. First position is
                zero.
                表示セル内のウィンドウ位置を取得します。最初の位置は0です。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    (row, col) tuple with the window position
                    ウィンドウ位置の(row, col)タプル。

nvim_win_get_tabpage({window})                        *nvim_win_get_tabpage()*
                Gets the window tabpage
                ウィンドウのタブページを取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    Tabpage that contains the window
                    ウィンドウを含むタブページ。

nvim_win_get_number({window})                          *nvim_win_get_number()*
                Gets the window number
                ウィンドウ番号を取得します。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    Window number
                    ウィンドウ番号。

nvim_win_is_valid({window})                              *nvim_win_is_valid()*
                Checks if a window is valid
                ウィンドウが有効かチェックします。

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {window}  ウィンドウハンドル。カレントウィンドウの場合は0。

                Return: ~
                    true if the window is valid, false otherwise
                    ウィンドウが有効ならtrue。それ以外はfalse。

nvim_win_set_config({window}, {config})                *nvim_win_set_config()*
                Configures window layout. Currently only for floating and
                external windows (including changing a split window to those
                layouts).

                When reconfiguring a floating window, absent option keys will
                not be changed. `row` / `col` and `relative` must be
                reconfigured together.

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {config}  Map defining the window configuration, see
                              |nvim_open_win()|

                See also: ~
                    |nvim_open_win()|

nvim_win_get_config({window})                          *nvim_win_get_config()*
                Gets window configuration.

                The returned value may be given to |nvim_open_win()|.

                `relative` is empty for normal windows.

                Parameters: ~
                    {window}  Window handle, or 0 for current window

                Return: ~
                    Map defining the window configuration, see
                    |nvim_open_win()|

nvim_win_close({window}, {force})                           *nvim_win_close()*
                Closes the window (like |:close| with a |window-ID|).

                Parameters: ~
                    {window}  Window handle, or 0 for current window
                    {force}   Behave like `:close!` The last window of a
                              buffer with unwritten changes can be closed. The
                              buffer will become hidden, even if 'hidden' is
                              not set.


==============================================================================
Tabpage Functions                                                *api-tabpage*

nvim_tabpage_list_wins({tabpage})                   *nvim_tabpage_list_wins()*
                Gets the windows in a tabpage

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage

                Return: ~
                    List of windows in `tabpage`

nvim_tabpage_get_var({tabpage}, {name})               *nvim_tabpage_get_var()*
                Gets a tab-scoped (t:) variable

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage
                    {name}     Variable name

                Return: ~
                    Variable value

nvim_tabpage_set_var({tabpage}, {name}, {value})      *nvim_tabpage_set_var()*
                Sets a tab-scoped (t:) variable

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage
                    {name}     Variable name
                    {value}    Variable value

nvim_tabpage_del_var({tabpage}, {name})               *nvim_tabpage_del_var()*
                Removes a tab-scoped (t:) variable

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage
                    {name}     Variable name

nvim_tabpage_get_win({tabpage})                       *nvim_tabpage_get_win()*
                Gets the current window in a tabpage

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage

                Return: ~
                    Window handle

nvim_tabpage_get_number({tabpage})                 *nvim_tabpage_get_number()*
                Gets the tabpage number

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage

                Return: ~
                    Tabpage number

nvim_tabpage_is_valid({tabpage})                     *nvim_tabpage_is_valid()*
                Checks if a tabpage is valid

                Parameters: ~
                    {tabpage}  Tabpage handle, or 0 for current tabpage

                Return: ~
                    true if the tabpage is valid, false otherwise


==============================================================================
UI Functions                                                          *api-ui*

nvim_ui_attach({width}, {height}, {options})                *nvim_ui_attach()*
                Activates UI events on the channel.

                Entry point of all UI clients. Allows |--embed| to continue
                startup. Implies that the client is ready to show the UI. Adds
                the client to the list of UIs. |nvim_list_uis()|

                Note:
                    If multiple UI clients are attached, the global screen
                    dimensions degrade to the smallest client. E.g. if client
                    A requests 80x40 but client B requests 200x100, the global
                    screen has size 80x40.

                Parameters: ~
                    {width}    Requested screen columns
                    {height}   Requested screen rows
                    {options}  |ui-option| map

nvim_ui_detach()                                            *nvim_ui_detach()*
                Deactivates UI events on the channel.

                Removes the client from the list of UIs. |nvim_list_uis()|

nvim_ui_try_resize({width}, {height})                   *nvim_ui_try_resize()*
                TODO: Documentation

nvim_ui_set_option({name}, {value})                     *nvim_ui_set_option()*
                TODO: Documentation

                                                   *nvim_ui_try_resize_grid()*
nvim_ui_try_resize_grid({grid}, {width}, {height})
                Tell Nvim to resize a grid. Triggers a grid_resize event with
                the requested grid size or the maximum size if it exceeds size
                limits.

                On invalid grid handle, fails with error.

                Parameters: ~
                    {grid}    The handle of the grid to be changed.
                    {width}   The new requested width.
                    {height}  The new requested height.

nvim_ui_pum_set_height({height})                    *nvim_ui_pum_set_height()*
                Tells Nvim the number of elements displaying in the popumenu,
                to decide <PageUp> and <PageDown> movement.

                Parameters: ~
                    {height}  Popupmenu height, must be greater than zero.

 vim:tw=78:ts=8:ft=help:norl:
